@ExtendWith(MockitoExtension.class)
class EventProcessorServiceTest {

    @Mock private WorkFlowRegistry workFlowRegistry;
    @Mock private Map<String, Step> stepRegistry;
    @Mock private ConditionRegistry conditionRegistry;
    @Mock private RetryScheduleService retryScheduleService;

    @InjectMocks
    private EventProcessorService service;

    private Event buildMockEvent(String entityType, String eventType) {
        MessageBody messageBody = new MessageBody();
        messageBody.setEntityType(entityType);
        messageBody.setEventType(eventType);
        messageBody.setEventId(UUID.randomUUID());

        Event event = new Event();
        event.setMessageId("msg-id");
        event.setMessageBody(messageBody);
        event.setProcessingStatus(EventStatus.INITIATED);
        event.setEventLogId(UUID.randomUUID());
        return event;
    }

    @Test
    void test_processEvent_noStepsFound() {
        String entityType = "ENTITY";
        String eventType = "EVENT";
        Event event = buildMockEvent(entityType, eventType);

        when(workFlowRegistry.getStepsForEvent(entityType, eventType)).thenReturn(Collections.emptyList());

        service.processEvent(event);

        // No exception, no steps invoked, context should be completed
        // assert using logs or mock verifications if needed
    }

    @Test
    void test_processEvent_withStep_executesSuccessfully() {
        String entityType = "ENTITY";
        String eventType = "EVENT";
        Event event = buildMockEvent(entityType, eventType);

        StepConfig stepConfig = new StepConfig();
        stepConfig.setName("mockStep");
        stepConfig.setRetryEnabled(false);

        Step mockStep = mock(Step.class);

        when(workFlowRegistry.getStepsForEvent(entityType, eventType)).thenReturn(List.of(stepConfig));
        when(stepRegistry.get("mockStep")).thenReturn(mockStep);

        service.processEvent(event);

        verify(mockStep).execute(any(WorkflowContext.class));
    }

    @Test
    void test_executeStep_stepFailsAndRetriesSuccessfully() {
        String entityType = "ENTITY";
        String eventType = "RETRY_EVENT";
        Event event = buildMockEvent(entityType, eventType);

        StepConfig stepConfig = new StepConfig();
        stepConfig.setName("retryStep");
        stepConfig.setRetryEnabled(true);
        StepConfig.RetryConfig retryConfig = new StepConfig.RetryConfig();
        retryConfig.setMaxRetryCount(2);
        retryConfig.setRetryBackoffMs("10");
        stepConfig.setRetryConfigs(retryConfig);

        Step mockStep = mock(Step.class);
        when(mockStep.getName()).thenReturn("retryStep");

        when(workFlowRegistry.getStepsForEvent(entityType, eventType)).thenReturn(List.of(stepConfig));
        when(stepRegistry.get("retryStep")).thenReturn(mockStep);

        doThrow(new ProcessorException(ProcessorExceptionType.INFRA_RETRYABLE, "temporary"))
            .doNothing()
            .when(mockStep).execute(any());

        service.processEvent(event);

        verify(mockStep, times(2)).execute(any());
    }

    @Test
    void test_executeStep_failsFatally() {
        String entityType = "ENTITY";
        String eventType = "FATAL_EVENT";
        Event event = buildMockEvent(entityType, eventType);

        StepConfig stepConfig = new StepConfig();
        stepConfig.setName("fatalStep");
        stepConfig.setRetryEnabled(true);
        StepConfig.RetryConfig retryConfig = new StepConfig.RetryConfig();
        retryConfig.setMaxRetryCount(1);
        retryConfig.setRetryBackoffMs("0");
        stepConfig.setRetryConfigs(retryConfig);

        Step mockStep = mock(Step.class);
        when(workFlowRegistry.getStepsForEvent(entityType, eventType)).thenReturn(List.of(stepConfig));
        when(stepRegistry.get("fatalStep")).thenReturn(mockStep);

        doThrow(new ProcessorException(ProcessorExceptionType.FATAL, "failure")).when(mockStep).execute(any());

        service.processEvent(event);

        verify(mockStep).execute(any());
        verifyNoInteractions(retryScheduleService); // no retry for FATAL
    }

    @Test
    void test_shouldExecute_returnsFalse_whenConditionFails() {
        String entityType = "ENTITY";
        String eventType = "COND_EVENT";
        Event event = buildMockEvent(entityType, eventType);

        StepConfig stepConfig = new StepConfig();
        stepConfig.setName("conditionalStep");
        stepConfig.setExecuteOnCondition("myCondition");

        ExecutionCondition condition = mock(ExecutionCondition.class);
        when(condition.evaluate(any())).thenReturn(false);

        when(workFlowRegistry.getStepsForEvent(entityType, eventType)).thenReturn(List.of(stepConfig));
        when(stepRegistry.get("conditionalStep")).thenReturn(mock(Step.class));
        when(conditionRegistry.get("myCondition")).thenReturn(condition);

        service.processEvent(event);

        verify(condition).evaluate(any());
    }
}