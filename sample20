import net.jpmchase.payroll.processor.common.config.StepConfig;
import net.jpmchase.payroll.processor.common.context.WorkflowContext;
import net.jpmchase.payroll.processor.common.context.WorkflowContextStatus;
import net.jpmchase.payroll.processor.service.EventProcessorService;
import net.jpmchase.payroll.processor.service.WorkflowRegistry;
import net.jpmchase.payroll.processor.steps.Condition;
import net.jpmchase.payroll.processor.steps.ConditionRegistry;
import net.jpmchase.payroll.processor.steps.RetryScheduleService;
import net.jpmchase.payroll.processor.steps.Step;
import net.jpmchase.payroll.processor.steps.WorkflowContextUtil;
import net.jpmchase.payroll.processor.common.model.Event;
import net.jpmchase.payroll.processor.common.exception.ProcessorException;
import net.jpmchase.payroll.processor.common.exception.ProcessorExceptionType;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;

import java.util.Collections;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class EventProcessorServiceTest {

    private WorkflowRegistry workflowRegistry;
    private Map<String, Step> stepRegistry;
    private ConditionRegistry conditionRegistry;
    private RetryScheduleService retryScheduleService;
    private EventProcessorService eventProcessorService;

    @BeforeEach
    void setup() {
        workflowRegistry = mock(WorkflowRegistry.class);
        stepRegistry = mock(Map.class);
        conditionRegistry = mock(ConditionRegistry.class);
        retryScheduleService = mock(RetryScheduleService.class);
        eventProcessorService = new EventProcessorService(workflowRegistry, stepRegistry, conditionRegistry, retryScheduleService);
    }

    @Test
    void shouldSkipIfStepNotFoundInRegistry() {
        StepConfig config = new StepConfig();
        config.setName("MissingStep");
        when(workflowRegistry.getStepsForEvent("Entity", "Event")).thenReturn(Collections.singletonList(config));
        when(stepRegistry.get("MissingStep")).thenReturn(null);

        Event event = new Event("Entity", "Event");
        eventProcessorService.processEvent(event);
        // Verify it safely skips
        verify(stepRegistry).get("MissingStep");
    }

    @Test
    void shouldEvaluateConditionAndSkipIfFalse() {
        StepConfig config = new StepConfig();
        config.setName("Step1");
        config.setExecuteOnCondition("condition1");

        Condition condition = mock(Condition.class);
        when(condition.evaluate(any())).thenReturn(false);

        when(workflowRegistry.getStepsForEvent("entity", "event")).thenReturn(Collections.singletonList(config));
        when(stepRegistry.get("Step1")).thenReturn(mock(Step.class));
        when(conditionRegistry.get("condition1")).thenReturn(condition);

        Event event = new Event("entity", "event");
        eventProcessorService.processEvent(event);
        verify(condition).evaluate(any());
    }

    @Test
    void shouldRetryAndEventuallySucceed() throws Exception {
        StepConfig config = new StepConfig();
        config.setName("StepRetry");
        config.setRetryEnabled(true);
        StepConfig.RetryConfig retryConfig = new StepConfig.RetryConfig();
        retryConfig.setMaxRetryCount(2);
        config.setRetryConfigs(retryConfig);

        Step step = mock(Step.class);
        when(step.execute(any())).thenThrow(new ProcessorException(ProcessorExceptionType.INFRA_RETRYABLE, "Fail"))
                                 .thenReturn(null); // success on 2nd attempt

        when(workflowRegistry.getStepsForEvent("e", "t")).thenReturn(Collections.singletonList(config));
        when(stepRegistry.get("StepRetry")).thenReturn(step);

        Event event = new Event("e", "t");
        eventProcessorService.processEvent(event);

        verify(step, times(2)).execute(any());
    }

    @Test
    void shouldHandleFatalError() throws Exception {
        StepConfig config = new StepConfig();
        config.setName("FatalStep");
        config.setRetryEnabled(true);
        StepConfig.RetryConfig retryConfig = new StepConfig.RetryConfig();
        retryConfig.setMaxRetryCount(1);
        config.setRetryConfigs(retryConfig);

        Step step = mock(Step.class);
        when(step.execute(any())).thenThrow(new ProcessorException(ProcessorExceptionType.FATAL, "Fatal failure"));

        when(workflowRegistry.getStepsForEvent("x", "y")).thenReturn(Collections.singletonList(config));
        when(stepRegistry.get("FatalStep")).thenReturn(step);

        Event event = new Event("x", "y");
        eventProcessorService.processEvent(event);
        verify(step, times(1)).execute(any());
    }

    @Test
    void shouldHandleSkippableError() throws Exception {
        StepConfig config = new StepConfig();
        config.setName("SkippableStep");
        Step step = mock(Step.class);
        when(step.execute(any())).thenThrow(new ProcessorException(ProcessorExceptionType.SKIPPABLE, "Skip"));

        when(workflowRegistry.getStepsForEvent("ent", "evt")).thenReturn(Collections.singletonList(config));
        when(stepRegistry.get("SkippableStep")).thenReturn(step);

        Event event = new Event("ent", "evt");
        eventProcessorService.processEvent(event);
        verify(step).execute(any());
    }

    @Test
    void shouldHandleSilentWarningError() throws Exception {
        StepConfig config = new StepConfig();
        config.setName("SilentStep");
        Step step = mock(Step.class);
        when(step.execute(any())).thenThrow(new ProcessorException(ProcessorExceptionType.SILENT_WARNING, "warn"));

        when(workflowRegistry.getStepsForEvent("abc", "xyz")).thenReturn(Collections.singletonList(config));
        when(stepRegistry.get("SilentStep")).thenReturn(step);

        Event event = new Event("abc", "xyz");
        eventProcessorService.processEvent(event);
        verify(step).execute(any());
    }

    @Test
    void shouldHandleBusinessValidation() throws Exception {
        StepConfig config = new StepConfig();
        config.setName("BizStep");
        Step step = mock(Step.class);
        when(step.execute(any())).thenThrow(new ProcessorException(ProcessorExceptionType.BUSINESS_VALIDATION, "fail"));

        when(workflowRegistry.getStepsForEvent("e1", "e2")).thenReturn(Collections.singletonList(config));
        when(stepRegistry.get("BizStep")).thenReturn(step);

        Event event = new Event("e1", "e2");
        eventProcessorService.processEvent(event);
        verify(step).execute(any());
    }

    @Test
    void shouldScheduleRetryOnInfraRetryableWhenSafEnabled() throws Exception {
        StepConfig config = new StepConfig();
        config.setName("RetryStep");
        config.setSafEnabled(true);
        Step step = mock(Step.class);
        when(step.execute(any())).thenThrow(new ProcessorException(ProcessorExceptionType.INFRA_RETRYABLE, "infra retry"));

        when(workflowRegistry.getStepsForEvent("E", "T")).thenReturn(Collections.singletonList(config));
        when(stepRegistry.get("RetryStep")).thenReturn(step);

        Event event = new Event("E", "T");
        eventProcessorService.processEvent(event);

        verify(retryScheduleService).scheduleRetry(eq(config), any(), any());
    }
}