package net.jpmchase.payroll.processor.steps.payee;

import net.jpmchase.payroll.processor.entity.PayeeAccountAuditEntity;
import net.jpmchase.payroll.processor.entity.PayeeAccountEntity;
import net.jpmchase.payroll.processor.enums.PayeeStatus;
import net.jpmchase.payroll.processor.exception.ProcessorException;
import net.jpmchase.payroll.processor.model.PaymentConfiguration;
import net.jpmchase.payroll.processor.model.Split;
import net.jpmchase.payroll.processor.persistence.PayeeAccountAuditRepository;
import net.jpmchase.payroll.processor.persistence.PayeeAccountRepository;
import net.jpmchase.payroll.processor.steps.Step;
import net.jpmchase.payroll.processor.util.WorkflowContext;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.sql.Timestamp;
import java.time.Instant;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class PayeeAccountStatusDeactivatorStepTest {

    private PayeeAccountRepository payeeAccountRepository;
    private PayeeAccountAuditRepository payeeAccountAuditRepository;
    private PayeeAccountStatusDeactivatorStep step;

    @BeforeEach
    public void setup() {
        payeeAccountRepository = mock(PayeeAccountRepository.class);
        payeeAccountAuditRepository = mock(PayeeAccountAuditRepository.class);

        step = new PayeeAccountStatusDeactivatorStep(payeeAccountRepository, payeeAccountAuditRepository);
    }

    @Test
    public void testExecute_successfulDeactivation() {
        WorkflowContext context = mock(WorkflowContext.class);
        String bankAccountUUID = "bank-123";
        String payeeId = "payee-123";
        String messageId = "msg-456";

        Split split = new Split();
        split.setBankAccountUuid(bankAccountUUID);
        List<Split> splits = List.of(split);

        PaymentConfiguration config = mock(PaymentConfiguration.class);
        when(config.getSplits()).thenReturn(splits);

        when(context.get(eq("GXPAY.PAYEE_PAYMENT_CONFIGURATION"), eq(PaymentConfiguration.class))).thenReturn(config);
        when(context.get(eq("BANK_ACCOUNT_UUID"), eq(String.class))).thenReturn(bankAccountUUID);
        when(context.get(eq("PAYEE_ID"), eq(String.class))).thenReturn(payeeId);
        when(context.get(eq("MESSAGE_ID"), eq(String.class))).thenReturn(messageId);

        PayeeAccountEntity accountEntity = new PayeeAccountEntity();
        accountEntity.setPayeeAcctId("acct-789");

        when(payeeAccountRepository.findBySourceBankId(bankAccountUUID))
                .thenReturn(Optional.of(accountEntity));

        // Act
        step.execute(context);

        // Assert
        verify(payeeAccountRepository).updateStatusBySrcBnkId(
                eq(bankAccountUUID), eq(PayeeStatus.PENDING_CHANGE.getCode()),
                eq("SYSTEM_USER"), any(Timestamp.class)
        );
        verify(payeeAccountAuditRepository).save(any(PayeeAccountAuditEntity.class));
    }

    @Test
    public void testExecute_bankAccountMissing_shouldThrow() {
        WorkflowContext context = mock(WorkflowContext.class);
        String bankAccountUUID = "missing-bank-uuid";

        PaymentConfiguration config = mock(PaymentConfiguration.class);
        when(config.getSplits()).thenReturn(List.of());

        when(context.get(eq("GXPAY.PAYEE_PAYMENT_CONFIGURATION"), eq(PaymentConfiguration.class))).thenReturn(config);
        when(context.get(eq("BANK_ACCOUNT_UUID"), eq(String.class))).thenReturn(bankAccountUUID);

        // Act & Assert
        ProcessorException ex = assertThrows(ProcessorException.class, () -> step.execute(context));
        assertTrue(ex.getMessage().contains("BANK_ACCOUNT_NOT_FOUND"));
    }

    @Test
    public void testExecute_bankAccountExistsInGusto_shouldThrow() {
        WorkflowContext context = mock(WorkflowContext.class);
        String bankAccountUUID = "duplicate-uuid";
        String messageId = "msg-999";
        String payeeId = "payee-999";

        Split split = new Split();
        split.setBankAccountUuid(bankAccountUUID);
        List<Split> splits = List.of(split, new Split());

        PaymentConfiguration config = mock(PaymentConfiguration.class);
        when(config.getSplits()).thenReturn(splits);

        when(context.get(eq("GXPAY.PAYEE_PAYMENT_CONFIGURATION"), eq(PaymentConfiguration.class))).thenReturn(config);
        when(context.get(eq("BANK_ACCOUNT_UUID"), eq(String.class))).thenReturn(bankAccountUUID);
        when(context.get(eq("MESSAGE_ID"), eq(String.class))).thenReturn(messageId);
        when(context.get(eq("PAYEE_ID"), eq(String.class))).thenReturn(payeeId);

        // simulate UUID match in splits (as if still in Gusto)
        Split s1 = new Split();
        s1.setBankAccountUuid(bankAccountUUID);
        when(config.getSplits()).thenReturn(List.of(s1));

        // Act & Assert
        ProcessorException ex = assertThrows(ProcessorException.class, () -> step.execute(context));
        assertTrue(ex.getMessage().contains("BANK_ACCOUNT_EXISTS_IN_VENDOR_BUT_DEL_EVT_RECEIVED"));
    }
}
package net.jpmchase.payroll.processor.steps.payroll;

import net.jpmchase.payroll.processor.entity.EnrollmentEntity;
import net.jpmchase.payroll.processor.entity.PayrollEntity;
import net.jpmchase.payroll.processor.exception.ProcessorException;
import net.jpmchase.payroll.processor.exception.ProcessorExceptionType;
import net.jpmchase.payroll.processor.model.GetPayrollResponse;
import net.jpmchase.payroll.processor.service.PayrollService;
import net.jpmchase.payroll.processor.steps.Step;
import net.jpmchase.payroll.processor.util.WorkflowContext;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.time.Instant;
import java.time.ZonedDateTime;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class GustoPayrollRetrievalStepTest {

    private PayrollService payrollService;
    private GustoPayrollRetrievalStep step;

    @BeforeEach
    void setUp() {
        payrollService = mock(PayrollService.class);
        step = new GustoPayrollRetrievalStep(payrollService);
    }

    @Test
    void testExecute_successfulProcessing() {
        WorkflowContext context = mock(WorkflowContext.class);
        String payrollUuid = UUID.randomUUID().toString();
        String companyId = "company-123";
        EnrollmentEntity enrollmentEntity = new EnrollmentEntity();

        PayrollEntity payrollEntity = new PayrollEntity();
        payrollEntity.setCalculatedDate(Instant.parse("2025-06-10T00:00:00Z"));

        GetPayrollResponse payrollResponse = mock(GetPayrollResponse.class);
        when(payrollResponse.isProcessed()).thenReturn(true);
        when(payrollResponse.getCalculatedAt()).thenReturn("2025-06-10T00:00:00Z");

        when(context.get("PAYROLL_UUID", String.class)).thenReturn(payrollUuid);
        when(context.get("COMPANY_UUID", String.class)).thenReturn(companyId);
        when(context.get("COMPANY_ENROLLMENT", EnrollmentEntity.class)).thenReturn(enrollmentEntity);
        when(context.get("PAYROLL_ENTITY", PayrollEntity.class)).thenReturn(payrollEntity);
        when(payrollService.getSinglePayrollEnrollmentEntity(enrollmentEntity.getEntPtyId(), companyId, payrollUuid))
                .thenReturn(payrollResponse);

        // Act
        step.execute(context);

        // Assert
        verify(context).put(eq("GUSTO_SINGLE_PAYROLL"), eq(payrollResponse));
    }

    @Test
    void testExecute_invalidStatus_shouldThrow() {
        WorkflowContext context = mock(WorkflowContext.class);
        String payrollUuid = "payroll-456";
        String companyId = "company-456";
        EnrollmentEntity enrollmentEntity = new EnrollmentEntity();

        GetPayrollResponse payrollResponse = mock(GetPayrollResponse.class);
        when(payrollResponse.isProcessed()).thenReturn(false);

        when(context.get("PAYROLL_UUID", String.class)).thenReturn(payrollUuid);
        when(context.get("COMPANY_UUID", String.class)).thenReturn(companyId);
        when(context.get("COMPANY_ENROLLMENT", EnrollmentEntity.class)).thenReturn(enrollmentEntity);

        when(payrollService.getSinglePayrollEnrollmentEntity(enrollmentEntity.getEntPtyId(), companyId, payrollUuid))
                .thenReturn(payrollResponse);

        ProcessorException ex = assertThrows(ProcessorException.class, () -> step.execute(context));
        assertEquals(ProcessorExceptionType.BUSINESS_VALIDATION, ex.getType());
        assertTrue(ex.getMessage().contains("INVALID_PAYROLL_STATUS"));
    }

    @Test
    void testExecute_dateMismatch_shouldThrow() {
        WorkflowContext context = mock(WorkflowContext.class);
        String payrollUuid = UUID.randomUUID().toString();
        String companyId = "company-date-mismatch";

        EnrollmentEntity enrollmentEntity = new EnrollmentEntity();

        PayrollEntity payrollEntity = new PayrollEntity();
        payrollEntity.setCalculatedDate(Instant.parse("2025-06-09T00:00:00Z")); // Mismatch here

        GetPayrollResponse payrollResponse = mock(GetPayrollResponse.class);
        when(payrollResponse.isProcessed()).thenReturn(true);
        when(payrollResponse.getCalculatedAt()).thenReturn("2025-06-10T00:00:00Z"); // Gusto calculated date

        when(context.get("PAYROLL_UUID", String.class)).thenReturn(payrollUuid);
        when(context.get("COMPANY_UUID", String.class)).thenReturn(companyId);
        when(context.get("COMPANY_ENROLLMENT", EnrollmentEntity.class)).thenReturn(enrollmentEntity);
        when(context.get("PAYROLL_ENTITY", PayrollEntity.class)).thenReturn(payrollEntity);

        when(payrollService.getSinglePayrollEnrollmentEntity(enrollmentEntity.getEntPtyId(), companyId, payrollUuid))
                .thenReturn(payrollResponse);

        ProcessorException ex = assertThrows(ProcessorException.class, () -> step.execute(context));
        assertEquals(ProcessorExceptionType.BUSINESS_VALIDATION, ex.getType());
        assertTrue(ex.getMessage().contains("INVALID_PAYROLL_CALCULATION_DATE"));
    }
}
package net.jpmchase.payroll.processor.steps.payroll;

import net.jpmchase.payroll.processor.entity.EnrollmentEntity;
import net.jpmchase.payroll.processor.entity.PayrollEntity;
import net.jpmchase.payroll.processor.enums.ProcessorExceptionType;
import net.jpmchase.payroll.processor.exception.ProcessorException;
import net.jpmchase.payroll.processor.model.GetPayrollResponse;
import net.jpmchase.payroll.processor.model.ProfileLimit;
import net.jpmchase.payroll.processor.model.EligibilityResponse;
import net.jpmchase.payroll.processor.persistence.PayrollLimitRepository;
import net.jpmchase.payroll.processor.persistence.ContractorPaymentGroupRepository;
import net.jpmchase.payroll.processor.service.CustomerConfigurationService;
import net.jpmchase.payroll.processor.util.WorkflowContext;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class CustomerInternalEligibilityValidationStepTest {

    private PayrollLimitRepository payrollLimitRepository;
    private ContractorPaymentGroupRepository contractorPaymentGroupRepository;
    private CustomerConfigurationService customerConfigurationService;
    private CustomerInternalEligibilityValidationStep step;

    @BeforeEach
    void setUp() {
        payrollLimitRepository = mock(PayrollLimitRepository.class);
        contractorPaymentGroupRepository = mock(ContractorPaymentGroupRepository.class);
        customerConfigurationService = mock(CustomerConfigurationService.class);
        step = new CustomerInternalEligibilityValidationStep(payrollLimitRepository, contractorPaymentGroupRepository, customerConfigurationService);
    }

    @Test
    void testExecute_validationPasses() {
        WorkflowContext context = mock(WorkflowContext.class);
        String companyId = "company123";
        String profileId = "profile123";
        String payrollId = "payroll789";

        EnrollmentEntity enrollment = new EnrollmentEntity();
        GetPayrollResponse payrollResponse = mock(GetPayrollResponse.class);
        PayrollEntity payrollEntity = new PayrollEntity();

        when(context.get("COMPANY_UUID", String.class)).thenReturn(companyId);
        when(context.get("COMPANY_ENROLLMENT", EnrollmentEntity.class)).thenReturn(enrollment);
        when(context.get("GUSTO_SINGLE_PAYROLL", GetPayrollResponse.class)).thenReturn(payrollResponse);
        when(context.get("PAYROLL_ENTITY", PayrollEntity.class)).thenReturn(payrollEntity);
        when(context.get("PROFILE_UUID", String.class)).thenReturn(profileId);
        when(context.get("PAYROLL_UUID", String.class)).thenReturn(payrollId);
        when(payrollResponse.getCompanyDebit()).thenReturn("100.00");

        ProfileLimit profileLimit = new ProfileLimit();
        profileLimit.setLimitAmount(new BigDecimal("500.00"));

        EligibilityResponse eligibilityResponse = new EligibilityResponse();
        eligibilityResponse.setEnterprisePartyIdentifier("actor-001");

        when(customerConfigurationService.validateEligibilityAndAccount(companyId, profileId)).thenReturn(profileLimit);
        when(customerConfigurationService.getEligibilityInfo(companyId, profileId)).thenReturn(eligibilityResponse);

        // Act
        step.execute(context);

        // Assert
        verify(context).put(eq("ACTOR_ENTP_PRTY_ID"), eq("actor-001"));
        verify(context).put(eq("LIMIT_AMT"), eq(new BigDecimal("500.00")));
        verify(context).put(eq("LIMIT_TYPE"), any());
        verify(context).put(eq("SEG_TYPE"), any());
    }

    @Test
    void testExecute_cancelFlagTrue_shouldSkip() {
        WorkflowContext context = mock(WorkflowContext.class);
        when(context.get("CANCEL_GUSTO_PAYROLL", Boolean.class)).thenReturn(true);

        // Should skip without exception
        assertDoesNotThrow(() -> step.execute(context));
    }

    @Test
    void testExecute_invalidProfile_shouldThrow() {
        WorkflowContext context = mock(WorkflowContext.class);

        when(context.get("CANCEL_GUSTO_PAYROLL", Boolean.class)).thenReturn(false);
        when(context.get("COMPANY_UUID", String.class)).thenReturn("company");
        when(context.get("PROFILE_UUID", String.class)).thenReturn(null); // Simulate missing profile
        when(context.get("PAYROLL_UUID", String.class)).thenReturn("payroll");
        when(context.get("COMPANY_ENROLLMENT", EnrollmentEntity.class)).thenReturn(new EnrollmentEntity());
        when(context.get("GUSTO_SINGLE_PAYROLL", GetPayrollResponse.class)).thenReturn(mock(GetPayrollResponse.class));
        when(context.get("PAYROLL_ENTITY", PayrollEntity.class)).thenReturn(mock(PayrollEntity.class));

        ProcessorException ex = assertThrows(ProcessorException.class, () -> step.execute(context));
        assertEquals(ProcessorExceptionType.BUSINESS_VALIDATION, ex.getType());
        assertTrue(ex.getMessage().contains("INVALID_PROFILE_ID"));
    }

    @Test
    void testExecute_limitExceeded_shouldThrow() {
        WorkflowContext context = mock(WorkflowContext.class);
        String companyId = "company";
        String profileId = "profile";
        String payrollId = "payroll";

        EnrollmentEntity enrollment = new EnrollmentEntity();
        GetPayrollResponse payrollResponse = mock(GetPayrollResponse.class);
        PayrollEntity payrollEntity = new PayrollEntity();

        when(context.get("CANCEL_GUSTO_PAYROLL", Boolean.class)).thenReturn(false);
        when(context.get("COMPANY_UUID", String.class)).thenReturn(companyId);
        when(context.get("COMPANY_ENROLLMENT", EnrollmentEntity.class)).thenReturn(enrollment);
        when(context.get("GUSTO_SINGLE_PAYROLL", GetPayrollResponse.class)).thenReturn(payrollResponse);
        when(context.get("PAYROLL_ENTITY", PayrollEntity.class)).thenReturn(payrollEntity);
        when(context.get("PROFILE_UUID", String.class)).thenReturn(profileId);
        when(context.get("PAYROLL_UUID", String.class)).thenReturn(payrollId);
        when(payrollResponse.getCompanyDebit()).thenReturn("1000.00"); // Exceeds limit

        ProfileLimit profileLimit = new ProfileLimit();
        profileLimit.setLimitAmount(new BigDecimal("500.00"));

        when(customerConfigurationService.validateEligibilityAndAccount(companyId, profileId)).thenReturn(profileLimit);

        ProcessorException ex = assertThrows(ProcessorException.class, () -> step.execute(context));
        assertEquals(ProcessorExceptionType.BUSINESS_VALIDATION, ex.getType());
        assertTrue(ex.getMessage().contains("DAILY_LIMIT_EXCEEDED"));
    }
}
package net.jpmchase.payroll.processor.steps.payroll;

import net.jpmchase.payroll.processor.entity.EnrollmentEntity;
import net.jpmchase.payroll.processor.entity.PayrollEntity;
import net.jpmchase.payroll.processor.enums.PayrollStatus;
import net.jpmchase.payroll.processor.service.PayrollService;
import net.jpmchase.payroll.processor.service.persistence.PayrollPersistenceService;
import net.jpmchase.payroll.processor.util.WorkflowContext;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.mockito.Mockito.*;

public class PayrollCancelStepTest {

    private PayrollService payrollService;
    private PayrollPersistenceService payrollPersistenceService;
    private PayrollCancelStep step;

    @BeforeEach
    void setUp() {
        payrollService = mock(PayrollService.class);
        payrollPersistenceService = mock(PayrollPersistenceService.class);
        step = new PayrollCancelStep(payrollService, payrollPersistenceService);
    }

    @Test
    void testExecute_shouldCancelPayrollSuccessfully() {
        // Arrange
        WorkflowContext context = mock(WorkflowContext.class);

        String payrollUuid = "payroll-123";
        String companyUuid = "company-456";

        EnrollmentEntity enrollmentEntity = new EnrollmentEntity();
        PayrollEntity payrollEntity = new PayrollEntity();
        payrollEntity.setEntPtyId("ent-789");

        when(context.get("PAYROLL_UUID", String.class)).thenReturn(payrollUuid);
        when(context.get("COMPANY_UUID", String.class)).thenReturn(companyUuid);
        when(context.get("COMPANY_ENROLLMENT", EnrollmentEntity.class)).thenReturn(enrollmentEntity);
        when(context.get("PAYROLL_ENTITY", PayrollEntity.class)).thenReturn(payrollEntity);

        // Act
        step.execute(context);

        // Assert
        verify(payrollService).cancelPayroll("ent-789", companyUuid, payrollUuid);
        verify(payrollPersistenceService).saveWithAudit(argThat(entity ->
                entity.getPtyRlStCd().equals(PayrollStatus.CANCELLED.getCode())
        ));
    }
}
