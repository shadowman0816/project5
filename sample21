package net.jpmchase.payroll.processor.steps.payroll;

import net.jpmchase.payroll.processor.common.context.WorkflowContext;
import net.jpmchase.payroll.processor.enums.ProcessorExceptionType;
import net.jpmchase.payroll.processor.exception.ProcessorException;
import net.jpmchase.payroll.processor.model.GetPayrollResponse;
import net.jpmchase.payroll.processor.model.entity.EnrollmentEntity;
import net.jpmchase.payroll.processor.model.entity.PayrollEntity;
import net.jpmchase.payroll.processor.model.limits.ProfileLimit;
import net.jpmchase.payroll.processor.model.response.PaymentCustomerEligibilityResponse;
import net.jpmchase.payroll.processor.repository.ContractorPaymentGroupRepository;
import net.jpmchase.payroll.processor.repository.PayrollRepository;
import net.jpmchase.payroll.processor.service.CustomerConfigurationService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import static net.jpmchase.payroll.processor.common.constants.ContextConstants.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class CustomerInternalEligibilityValidationStepTest {

    private CustomerInternalEligibilityValidationStep step;
    private CustomerConfigurationService customerConfigurationService;
    private PayrollRepository payrollRepository;
    private ContractorPaymentGroupRepository contractorPaymentGroupRepository;

    private WorkflowContext context;

    @BeforeEach
    void setUp() {
        customerConfigurationService = mock(CustomerConfigurationService.class);
        payrollRepository = mock(PayrollRepository.class);
        contractorPaymentGroupRepository = mock(ContractorPaymentGroupRepository.class);
        step = new CustomerInternalEligibilityValidationStep(customerConfigurationService, payrollRepository, contractorPaymentGroupRepository);

        context = new WorkflowContext();
    }

    @Test
    void shouldSkipStepWhenCancelFlagIsSet() {
        context.put(CANCEL_GUSTO_PAYROLL, true);
        step.execute(context);
        // No exception = success
    }

    @Test
    void shouldPassValidationWhenTotalAmountWithinLimit() {
        UUID companyId = UUID.randomUUID();
        UUID payrollId = UUID.randomUUID();
        String profileId = "profile-123";

        EnrollmentEntity enrollmentEntity = new EnrollmentEntity();
        GetPayrollResponse payrollResponse = new GetPayrollResponse();
        PayrollEntity payrollEntity = new PayrollEntity();

        context.put(COMPANY_UUID, companyId.toString());
        context.put(PYRL_UUID, payrollId.toString());
        context.put(PYRL_EMPLOYEE_TXN_ID, UUID.randomUUID().toString());
        context.put(SRC_PAYEE_ID, UUID.randomUUID().toString());
        context.put(COMPANY_ENROLLMENT, enrollmentEntity);
        context.put(SRC_GUSTO_SINGLE_PAYROLL, payrollResponse);
        context.put(PYRL_ENTITY, payrollEntity);

        PaymentCustomerEligibilityResponse eligibilityResponse = new PaymentCustomerEligibilityResponse();
        ProfileLimit profileLimit = mock(ProfileLimit.class);

        when(customerConfigurationService.validateProfileAccountAndLimit(any(), anyString(), anyString()))
                .thenReturn(eligibilityResponse);
        when(customerConfigurationService.getLimit(any(ProfileLimit.class))).thenReturn(new BigDecimal("1000.00"));
        when(payrollRepository.findTotalPayrollByEnrEnIdAndProcessDate(any(), any())).thenReturn(List.of(BigDecimal.ZERO));
        when(payrollEntity.getProcessedDate()).thenReturn("2025-05-30");
        when(payrollResponse.getTotals()).thenReturn(Map.of("companyDebit", new BigDecimal("250.00")));
        when(eligibilityResponse.getProfileLimit()).thenReturn(profileLimit);
        when(profileLimit.getProfileId()).thenReturn(profileId);
        when(payrollEntity.getEntPrptyId()).thenReturn("some-entity");

        assertDoesNotThrow(() -> step.execute(context));
    }

    @Test
    void shouldThrowExceptionWhenLimitExceeded() {
        UUID companyId = UUID.randomUUID();
        UUID payrollId = UUID.randomUUID();

        EnrollmentEntity enrollmentEntity = new EnrollmentEntity();
        GetPayrollResponse payrollResponse = new GetPayrollResponse();
        PayrollEntity payrollEntity = new PayrollEntity();

        context.put(COMPANY_UUID, companyId.toString());
        context.put(PYRL_UUID, payrollId.toString());
        context.put(PYRL_EMPLOYEE_TXN_ID, UUID.randomUUID().toString());
        context.put(SRC_PAYEE_ID, UUID.randomUUID().toString());
        context.put(COMPANY_ENROLLMENT, enrollmentEntity);
        context.put(SRC_GUSTO_SINGLE_PAYROLL, payrollResponse);
        context.put(PYRL_ENTITY, payrollEntity);

        PaymentCustomerEligibilityResponse eligibilityResponse = new PaymentCustomerEligibilityResponse();
        ProfileLimit profileLimit = mock(ProfileLimit.class);

        when(customerConfigurationService.validateProfileAccountAndLimit(any(), anyString(), anyString()))
                .thenReturn(eligibilityResponse);
        when(customerConfigurationService.getLimit(any(ProfileLimit.class))).thenReturn(new BigDecimal("100.00"));
        when(payrollRepository.findTotalPayrollByEnrEnIdAndProcessDate(any(), any())).thenReturn(List.of(BigDecimal.ZERO));
        when(payrollEntity.getProcessedDate()).thenReturn("2025-05-30");
        when(payrollResponse.getTotals()).thenReturn(Map.of("companyDebit", new BigDecimal("200.00")));
        when(eligibilityResponse.getProfileLimit()).thenReturn(profileLimit);
        when(profileLimit.getProfileId()).thenReturn("profile-X");
        when(payrollEntity.getEntPrptyId()).thenReturn("enterprise-X");

        ProcessorException ex = assertThrows(ProcessorException.class, () -> step.execute(context));
        assertEquals(ProcessorExceptionType.BUSINESS_VALIDATION, ex.getType());
        assertTrue(ex.getMessage().contains("DAILY_LIMIT_EXCEEDED"));
    }
}