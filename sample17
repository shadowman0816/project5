package net.jpmchase.payroll.processor.common.config;

import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class StepConfig {
    private String name;
    private String executeOnCondition;
    private boolean retryEnabled = true;
    private RetryConfig retryConfigs;
    private boolean safEnabled = true;
    private SafConfig safConfigs;

    @Getter
    @Setter
    public static class RetryConfig {
        private String retryBackoff;     // e.g., "100ms"
        private int maxRetryCount;       // e.g., 3
    }

    @Getter
    @Setter
    public static class SafConfig {
        private boolean enabled;
        private int maxBackoffHours;     // e.g., 3
        private String cutoffTime;       // e.g., "18:30"
    }
}
package net.jpmchase.payroll.processor.common.config;

import lombok.Getter;
import lombok.Setter;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

import java.util.Map;

@Getter
@Setter
@Component
@ConfigurationProperties(prefix = "workflow")
public class WorkflowConfig {
    private boolean retryEnabled;
    private StepConfig.RetryConfig retryConfigs;
    private boolean safEnabled;
    private StepConfig.SafConfig safConfigs;
    private Map<String, GroupConfig> groups;
}
package net.jpmchase.payroll.processor.common.config;

import lombok.Getter;
import lombok.Setter;

import java.util.List;
import java.util.Map;

@Getter
@Setter
public class GroupConfig {
    private boolean retryEnabled;
    private StepConfig.RetryConfig retryConfigs;
    private boolean safEnabled;
    private StepConfig.SafConfig safConfigs;
    private Map<String, List<StepConfig>> events;
}
package net.jpmchase.payroll.processor.registry;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.jpmchase.payroll.processor.common.config.GroupConfig;
import net.jpmchase.payroll.processor.common.config.StepConfig;
import net.jpmchase.payroll.processor.common.config.WorkflowConfig;
import org.springframework.stereotype.Component;

import java.util.*;

@Slf4j
@Component
@RequiredArgsConstructor
public class WorkFlowRegistry {

    private final WorkflowConfig workflowConfig;

    public List<StepConfig> getStepsForEvent(String entityType, String eventType) {
        GroupConfig groupConfig = workflowConfig.getGroups().get(entityType);
        if (groupConfig == null) {
            log.warn("No group config found for entityType '{}'", entityType);
            return Collections.emptyList();
        }

        List<StepConfig> steps = groupConfig.getEvents().get(eventType);
        if (steps == null) {
            log.warn("No steps found for eventType '{}' in entityType '{}'", eventType, entityType);
            return Collections.emptyList();
        }

        for (StepConfig step : steps) {
            applyRetryConfig(step, groupConfig);
            applySafConfig(step, groupConfig);
        }

        return steps;
    }

    private void applyRetryConfig(StepConfig step, GroupConfig groupConfig) {
        if (!step.isRetryEnabled()) {
            return; // Step explicitly disables retry
        }

        // Step-level retry config takes precedence
        if (step.getRetryConfigs() == null) {
            if (groupConfig.isRetryEnabled() && groupConfig.getRetryConfigs() != null) {
                step.setRetryConfigs(groupConfig.getRetryConfigs());
            } else if (workflowConfig.isRetryEnabled() && workflowConfig.getRetryConfigs() != null) {
                step.setRetryConfigs(workflowConfig.getRetryConfigs());
            }
        }
    }

    private void applySafConfig(StepConfig step, GroupConfig groupConfig) {
        if (!step.isSafEnabled()) {
            return; // Step explicitly disables SAF/backoff
        }

        // Step-level SAF config takes precedence
        if (step.getSafConfigs() == null) {
            if (groupConfig.isSafEnabled() && groupConfig.getSafConfigs() != null) {
                step.setSafConfigs(groupConfig.getSafConfigs());
            } else if (workflowConfig.isSafEnabled() && workflowConfig.getSafConfigs() != null) {
                step.setSafConfigs(workflowConfig.getSafConfigs());
            }
        }
    }

    public StepConfig getStepConfig(String entityType, String eventType, String stepName) {
        return getStepsForEvent(entityType, eventType).stream()
            .filter(step -> step.getName().equals(stepName))
            .findFirst()
            .orElse(null);
    }

    public int getRetryCountForStep(String entityType, String eventType, String stepName) {
        StepConfig stepConfig = getStepConfig(entityType, eventType, stepName);
        return stepConfig != null && stepConfig.getRetryConfigs() != null
                ? stepConfig.getRetryConfigs().getMaxRetryCount()
                : 0;
    }

    public StepConfig.SafConfig getSafConfig(String entityType, String eventType, String stepName) {
        StepConfig stepConfig = getStepConfig(entityType, eventType, stepName);
        return stepConfig != null ? stepConfig.getSafConfigs() : null;
    }
}
package net.jpmchase.payroll.processor.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.jpmchase.payroll.processor.common.config.StepConfig;
import net.jpmchase.payroll.processor.common.context.WorkflowContext;
import net.jpmchase.payroll.processor.common.context.WorkflowContextStatus;
import net.jpmchase.payroll.processor.common.exception.ProcessorException;
import net.jpmchase.payroll.processor.common.exception.ProcessorExceptionType;
import net.jpmchase.payroll.processor.registry.ConditionRegistry;
import net.jpmchase.payroll.processor.registry.WorkFlowRegistry;
import net.jpmchase.payroll.processor.steps.Step;
import net.jpmchase.payroll.processor.utils.ExceptionClassifierUtil;
import net.jpmchase.payroll.processor.utils.WorkflowContextUtil;
import org.slf4j.MDC;
import org.springframework.stereotype.Service;

import java.util.Collections;
import java.util.List;
import java.util.Map;

import static net.jpmchase.payroll.processor.utils.WorkflowContextUtil.GUSTO_EVENTID;

@Service
@RequiredArgsConstructor
@Slf4j
public class EventProcessorService {

    private final WorkFlowRegistry workFlowRegistry;
    private final Map<String, Step> stepRegistry;
    private final ConditionRegistry conditionRegistry;
    private final RetryScheduleService retryScheduleService;

    public void processEvent(Event event) {
        final String eventId = String.valueOf(event.getMessageBody().getEventId());
        MDC.put(GUSTO_EVENTID, eventId);
        log.info("[PROCESSOR] Starting processing of event: {}", eventId);

        WorkflowContext context = new WorkflowContext();
        context.setStatus(WorkflowContextStatus.INITIATED);
        context.put(WorkflowContextUtil.EVENT, event);

        try {
            for (StepConfig stepConfig : getStepsForEvent(event)) {
                executeStepWithRetry(stepConfig, context);
                if (context.getStatus() != WorkflowContextStatus.SUCCESS) {
                    break;
                }
            }
            context.setStatus(WorkflowContextStatus.COMPLETED);
        } finally {
            MDC.clear();
        }

        log.info("[PROCESSOR] Event processing completed for event: {}", eventId);
    }

    private void executeStepWithRetry(StepConfig stepConfig, WorkflowContext context) {
        int retryCount = 0;
        String stepName = stepConfig.getName();
        log.info("[PROCESSOR] Executing step '{}' (Attempt {}/{})", stepName, retryCount + 1, stepConfig.getImmediateRetryCount());

        Step stepExecutor = stepRegistry.get(stepName);
        if (stepExecutor == null) {
            log.warn("[PROCESSOR] Step '{}' not found in registry. Skipping.", stepName);
            return;
        }

        if (!shouldExecute(stepConfig, context)) {
            log.info("[PROCESSOR] Skipping step '{}' due to failed condition evaluation.", stepName);
            return;
        }

        boolean retryEnabled = workFlowRegistry.isRetryEnabled(stepConfig);
        int maxRetries = workFlowRegistry.getRetryCount(stepConfig);

        while (retryCount <= maxRetries) {
            try {
                stepExecutor.execute(context);
                context.setStatus(WorkflowContextStatus.SUCCESS);
                log.info("[PROCESSOR] Step '{}' executed successfully on attempt {}/{}", stepName, retryCount + 1, maxRetries + 1);
                return;
            } catch (Exception e) {
                retryCount++;
                log.warn("[PROCESSOR] Step '{}' failed on attempt {}/{}. Retrying... Reason: {}", stepName, retryCount, maxRetries + 1, e.getMessage());
                ProcessorException classified = (e instanceof ProcessorException)
                        ? (ProcessorException) e
                        : ExceptionClassifierUtil.classify(e, stepName);

                if (retryCount > maxRetries) {
                    handleException(stepConfig, context, classified, stepName, retryCount);
                    return;
                }
            }
        }
    }

    private void handleException(StepConfig stepConfig, WorkflowContext context, ProcessorException e, String stepName, int retryCount) {
        String failureReason = String.format("Step '%s' failed (Attempt %d/%d). Failure Reason : %s",
                stepName, retryCount, stepConfig.getImmediateRetryCount(), e.getMessage());

        switch (e.getType()) {
            case FATAL:
                context.setStatus(WorkflowContextStatus.FAILED);
                log.error("[PROCESSOR] Fatal error: {}", e.getMessage());
                break;

            case BUSINESS_VALIDATION:
                context.put(WorkflowContextUtil.CANCEL_GUSTO_PAYROLL, true);
                context.setStatus(WorkflowContextStatus.SUCCESS);
                log.warn("[PROCESSOR] Business validation failed: {}", e.getMessage());
                break;

            case INFRA_RETRYABLE:
                if (workFlowRegistry.isSafEnabled(stepConfig)) {
                    retryScheduleService.scheduleRetry(stepConfig, context, failureReason);
                }
                context.setStatus(WorkflowContextStatus.FAILED);
                break;

            case SKIPPABLE:
                context.setStatus(WorkflowContextStatus.SUCCESS);
                log.warn("[PROCESSOR] Skippable error occurred in step '{}': {}", stepName, e.getMessage());
                break;

            case FLOW_HALT:
                context.setStatus(WorkflowContextStatus.COMPLETED);
                log.info("[PROCESSOR] Flow halted intentionally in step '{}': {}", stepName, e.getMessage());
                break;

            case SILENT_WARNING:
                context.setStatus(WorkflowContextStatus.SUCCESS);
                log.warn("[PROCESSOR] Silent warning in step '{}': {}", stepName, e.getMessage());
                break;

            default:
                context.setStatus(WorkflowContextStatus.FAILED);
                log.error("[PROCESSOR] Unknown error type in step '{}'", stepName);
        }
    }

    private boolean shouldExecute(StepConfig stepConfig, WorkflowContext context) {
        String conditionName = stepConfig.getExecuteOnCondition();
        if (conditionName == null || conditionName.equalsIgnoreCase("always")) return true;
        try {
            var condition = conditionRegistry.get(conditionName);
            if (condition == null) {
                log.warn("[PROCESSOR] No condition bean found for '{}'. Skipping execution.", conditionName);
                return false;
            }
            return condition.evaluate(context);
        } catch (Exception e) {
            log.error("[PROCESSOR] Failed to evaluate condition '{}'. Error: {}", conditionName, e.getMessage(), e);
            return false;
        }
    }

    private Iterable<StepConfig> getStepsForEvent(Event event) {
        String entityType = event.getMessageBody().getEntityType();
        String eventType = event.getMessageBody().getEventType();
        List<StepConfig> stepConfigs = workFlowRegistry.getStepsForEvent(entityType, eventType);
        if (stepConfigs.isEmpty()) {
            log.warn("No workflow found for event '{}' and entity type '{}'. Skipping processing.", eventType, entityType);
            return Collections.emptyList();
        }
        return stepConfigs;
    }
}
public boolean isRetryEnabled(StepConfig stepConfig) {
    // Step-level override
    if (stepConfig.getRetryEnabled() != null) {
        return stepConfig.getRetryEnabled();
    }

    // Group-level fallback
    String entityType = stepConfig.getEntityType(); // You may need to pass this explicitly or attach to StepConfig
    String eventType = stepConfig.getEventType();   // Same here
    GroupConfig groupConfig = getGroupConfig(entityType);
    if (groupConfig != null && groupConfig.getRetryEnabled() != null) {
        return groupConfig.getRetryEnabled();
    }

    // Workflow-level fallback
    Boolean workflowRetryEnabled = workflowConfig.getRetryEnabled();
    return workflowRetryEnabled != null && workflowRetryEnabled;
}
public boolean isRetryEnabled(String entityType, String eventType, StepConfig stepConfig) {
    // Step-level config (always present since primitive boolean)
    if (!stepConfig.isRetryEnabled()) {
        return false;
    }

    // Step-level says retry is enabled, now validate group and workflow level defaults
    GroupConfig groupConfig = getGroupConfig(entityType);
    if (groupConfig != null) {
        Boolean groupRetry = groupConfig.isRetryEnabled();
        if (groupRetry != null && !groupRetry) {
            return false; // Group disables retry, overrides
        }
    }

    Boolean workflowRetry = workflowConfig.isRetryEnabled();
    if (workflowRetry != null && !workflowRetry) {
        return false; // Workflow disables retry
    }

    return true;
}
