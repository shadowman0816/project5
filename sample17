package net.jpmchase.payroll.processor.common.config;

import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class StepConfig {
    private String name;
    private String executeOnCondition;
    private boolean retryEnabled = true;
    private RetryConfig retryConfigs;
    private boolean safEnabled = true;
    private SafConfig safConfigs;

    @Getter
    @Setter
    public static class RetryConfig {
        private String retryBackoff;     // e.g., "100ms"
        private int maxRetryCount;       // e.g., 3
    }

    @Getter
    @Setter
    public static class SafConfig {
        private boolean enabled;
        private int maxBackoffHours;     // e.g., 3
        private String cutoffTime;       // e.g., "18:30"
    }
}
package net.jpmchase.payroll.processor.common.config;

import lombok.Getter;
import lombok.Setter;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

import java.util.Map;

@Getter
@Setter
@Component
@ConfigurationProperties(prefix = "workflow")
public class WorkflowConfig {
    private boolean retryEnabled;
    private StepConfig.RetryConfig retryConfigs;
    private boolean safEnabled;
    private StepConfig.SafConfig safConfigs;
    private Map<String, GroupConfig> groups;
}
package net.jpmchase.payroll.processor.common.config;

import lombok.Getter;
import lombok.Setter;

import java.util.List;
import java.util.Map;

@Getter
@Setter
public class GroupConfig {
    private boolean retryEnabled;
    private StepConfig.RetryConfig retryConfigs;
    private boolean safEnabled;
    private StepConfig.SafConfig safConfigs;
    private Map<String, List<StepConfig>> events;
}
package net.jpmchase.payroll.processor.registry;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.jpmchase.payroll.processor.common.config.GroupConfig;
import net.jpmchase.payroll.processor.common.config.StepConfig;
import net.jpmchase.payroll.processor.common.config.WorkflowConfig;
import org.springframework.stereotype.Component;

import java.util.*;

@Slf4j
@Component
@RequiredArgsConstructor
public class WorkFlowRegistry {

    private final WorkflowConfig workflowConfig;

    public List<StepConfig> getStepsForEvent(String entityType, String eventType) {
        GroupConfig groupConfig = workflowConfig.getGroups().get(entityType);
        if (groupConfig == null) {
            log.warn("No group config found for entityType '{}'", entityType);
            return Collections.emptyList();
        }

        List<StepConfig> steps = groupConfig.getEvents().get(eventType);
        if (steps == null) {
            log.warn("No steps found for eventType '{}' in entityType '{}'", eventType, entityType);
            return Collections.emptyList();
        }

        for (StepConfig step : steps) {
            applyRetryConfig(step, groupConfig);
            applySafConfig(step, groupConfig);
        }

        return steps;
    }

    private void applyRetryConfig(StepConfig step, GroupConfig groupConfig) {
        if (!step.isRetryEnabled()) {
            return; // Step explicitly disables retry
        }

        // Step-level retry config takes precedence
        if (step.getRetryConfigs() == null) {
            if (groupConfig.isRetryEnabled() && groupConfig.getRetryConfigs() != null) {
                step.setRetryConfigs(groupConfig.getRetryConfigs());
            } else if (workflowConfig.isRetryEnabled() && workflowConfig.getRetryConfigs() != null) {
                step.setRetryConfigs(workflowConfig.getRetryConfigs());
            }
        }
    }

    private void applySafConfig(StepConfig step, GroupConfig groupConfig) {
        if (!step.isSafEnabled()) {
            return; // Step explicitly disables SAF/backoff
        }

        // Step-level SAF config takes precedence
        if (step.getSafConfigs() == null) {
            if (groupConfig.isSafEnabled() && groupConfig.getSafConfigs() != null) {
                step.setSafConfigs(groupConfig.getSafConfigs());
            } else if (workflowConfig.isSafEnabled() && workflowConfig.getSafConfigs() != null) {
                step.setSafConfigs(workflowConfig.getSafConfigs());
            }
        }
    }

    public StepConfig getStepConfig(String entityType, String eventType, String stepName) {
        return getStepsForEvent(entityType, eventType).stream()
            .filter(step -> step.getName().equals(stepName))
            .findFirst()
            .orElse(null);
    }

    public int getRetryCountForStep(String entityType, String eventType, String stepName) {
        StepConfig stepConfig = getStepConfig(entityType, eventType, stepName);
        return stepConfig != null && stepConfig.getRetryConfigs() != null
                ? stepConfig.getRetryConfigs().getMaxRetryCount()
                : 0;
    }

    public StepConfig.SafConfig getSafConfig(String entityType, String eventType, String stepName) {
        StepConfig stepConfig = getStepConfig(entityType, eventType, stepName);
        return stepConfig != null ? stepConfig.getSafConfigs() : null;
    }
}

