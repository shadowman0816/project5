@ExtendWith(MockitoExtension.class)
class PayrollProcessingWindowDeterminationStepTest {

    @InjectMocks
    private PayrollProcessingWindowDeterminationStep step;

    @Mock
    private HolidayService holidayService;

    @Mock
    private PayrollRepository payrollRepository;

    @Mock
    private WorkflowContext context;

    @Mock
    private GetPayrollResponse payrollResponse;

    @BeforeEach
    void setup() {
        ReflectionTestUtils.setField(step, "cutoffTimeStr", "16:00");
    }

    @Test
    void shouldPassWhenProcessingWindowIsValid() {
        String payrollId = "PR001";
        String timestamp = String.valueOf(Instant.now().getEpochSecond());
        String procDate = LocalDate.now().toString();
        String checkDate = procDate;

        when(context.get(eq("PAYROLL_ID"), eq(String.class))).thenReturn(payrollId);
        when(context.get(eq("TIMESTAMP"), eq(String.class))).thenReturn(timestamp);
        when(context.get(eq("GUSTO_SINGLE_PAYROLL"), eq(GetPayrollResponse.class))).thenReturn(payrollResponse);
        when(payrollResponse.getProcessedDate()).thenReturn(procDate);
        when(payrollResponse.getCheckDate()).thenReturn(checkDate);
        when(holidayService.isHoliday(any())).thenReturn(false);
        when(payrollRepository.findBySrcPayrollId(payrollId)).thenReturn(Optional.of(new PayrollEntity()));

        assertDoesNotThrow(() -> step.execute(context));
    }

    @Test
    void shouldFailIfCutoffTimeBreached() {
        String timestamp = String.valueOf(
                ZonedDateTime.of(LocalDate.now(), LocalTime.of(18, 0), ZoneId.systemDefault()).toEpochSecond());

        when(context.get(eq("TIMESTAMP"), eq(String.class))).thenReturn(timestamp);

        assertThrows(ProcessorException.class, () -> step.execute(context));
    }

    @Test
    void shouldFailIfProcessedDateIsHoliday() {
        String procDate = LocalDate.now().toString();

        setupDefaultContext(procDate, procDate);
        when(holidayService.isHoliday(LocalDate.parse(procDate))).thenReturn(true);

        assertThrows(ProcessorException.class, () -> step.execute(context));
    }

    @Test
    void shouldFailIfCheckDateMismatch() {
        String procDate = LocalDate.now().toString();
        String actualCheckDate = LocalDate.now().plusDays(3).toString();

        setupDefaultContext(procDate, actualCheckDate);
        when(holidayService.isHoliday(any())).thenReturn(false);

        assertThrows(ProcessorException.class, () -> step.execute(context));
    }

    @Test
    void shouldFailIfPayrollRecordMissing() {
        String procDate = LocalDate.now().toString();

        setupDefaultContext(procDate, procDate);
        when(holidayService.isHoliday(any())).thenReturn(false);
        when(payrollRepository.findBySrcPayrollId(anyString())).thenReturn(Optional.empty());

        assertThrows(ProcessorException.class, () -> step.execute(context));
    }

    private void setupDefaultContext(String procDate, String checkDate) {
        when(context.get(eq("PAYROLL_ID"), eq(String.class))).thenReturn("PR001");
        when(context.get(eq("TIMESTAMP"), eq(String.class))).thenReturn(String.valueOf(Instant.now().getEpochSecond()));
        when(context.get(eq("GUSTO_SINGLE_PAYROLL"), eq(GetPayrollResponse.class))).thenReturn(payrollResponse);
        when(payrollResponse.getProcessedDate()).thenReturn(procDate);
        when(payrollResponse.getCheckDate()).thenReturn(checkDate);
        when(payrollRepository.findBySrcPayrollId("PR001")).thenReturn(Optional.of(new PayrollEntity()));
    }
}
package net.jpmchase.payroll.processor.steps.payroll.gusto;

import net.jpmchase.payroll.processor.exception.ProcessorException;
import net.jpmchase.payroll.processor.repository.enrl.EnrollmentRepository;
import net.jpmchase.payroll.processor.service.gusto.retrieval.PayrollService;
import net.jpmchase.payroll.processor.steps.common.context.WorkflowContext;
import net.jpmchase.payroll.processor.steps.common.context.WorkflowContextUtil;
import net.jpmchase.payroll.processor.remote.gusto.model.payroll.GetPayrollResponse;
import net.jpmchase.payroll.processor.repository.enrl.entity.EnrollmentEntity;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class GustoSinglePayrollInformationRetrievalStepTest {

    private PayrollService payrollService;
    private EnrollmentRepository enrollmentRepository;
    private GustoSinglePayrollInformationRetrievalStep step;
    private WorkflowContext context;

    @BeforeEach
    void setUp() {
        payrollService = mock(PayrollService.class);
        enrollmentRepository = mock(EnrollmentRepository.class);
        context = mock(WorkflowContext.class);
        step = new GustoSinglePayrollInformationRetrievalStep(payrollService, enrollmentRepository);
    }

    @Test
    void shouldThrowIfEnrollmentIsMissing() {
        String companyId = "COMP123";
        String payrollId = "PYRL001";

        when(context.get(WorkflowContextUtil.COMPANY_UUID, String.class)).thenReturn(companyId);
        when(context.get(WorkflowContextUtil.PAYROLL_ID, String.class)).thenReturn(payrollId);
        when(enrollmentRepository.findRelEntPtryIdBySrcCoId(companyId)).thenReturn(Optional.empty());

        ProcessorException exception = assertThrows(ProcessorException.class, () -> step.execute(context));
        assertTrue(exception.getMessage().contains(companyId));
        verify(enrollmentRepository).findRelEntPtryIdBySrcCoId(companyId);
    }

    @Test
    void shouldRetrieveAndPutPayrollResponseIfEnrollmentFound() {
        String companyId = "COMP123";
        String payrollId = "PYRL001";
        EnrollmentEntity enrollment = new EnrollmentEntity();
        enrollment.setRelEntPtryId("ACTOR001");

        GetPayrollResponse response = new GetPayrollResponse();

        when(context.get(WorkflowContextUtil.COMPANY_UUID, String.class)).thenReturn(companyId);
        when(context.get(WorkflowContextUtil.PAYROLL_ID, String.class)).thenReturn(payrollId);
        when(enrollmentRepository.findRelEntPtryIdBySrcCoId(companyId)).thenReturn(Optional.of(enrollment));
        when(payrollService.getSinglePayroll("ACTOR001", companyId, payrollId)).thenReturn(response);

        step.execute(context);

        verify(context).put(WorkflowContextUtil.ENROLLMENT, enrollment);
        verify(context).put(WorkflowContextUtil.GUSTO_SINGLE_PAYROLL, response);
    }
}

package net.jpmchase.payroll.processor.repository.mgmt.mapper;

import net.jpmchase.payroll.processor.remote.gusto.model.payroll.GetPayrollResponse;
import net.jpmchase.payroll.processor.remote.gusto.model.payroll.EmployeeCompensations;
import net.jpmchase.payroll.processor.remote.gusto.model.payroll.Tax;
import net.jpmchase.payroll.processor.remote.gusto.model.payroll.Deduction;
import net.jpmchase.payroll.processor.repository.mgmt.entity.payroll.PayrollTransactionEntity;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.time.Instant;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class PayrollTransactionEntityMapperTest {

    private GetPayrollResponse response;
    private final String srcEvtId = "EVT001";
    private final String actorEntpPrtyId = "ACT001";
    private final String srcPayrollId = "PAYROLL001";
    private final Long omnibusAcctId = 999L;

    @BeforeEach
    void setUp() {
        response = new GetPayrollResponse();
        response.setProcessedDate(Timestamp.from(Instant.parse("2024-10-15T00:00:00Z")).toString());

        EmployeeCompensations emp = new EmployeeCompensations();
        emp.setEmployeeUuid("EMP123");
        emp.setNetPay("200.00");
        emp.setCheckAmount("180.00");
        emp.setPaymentType("direct_deposit");

        Tax tax = new Tax();
        tax.setAmount("20.00");
        emp.setTaxes(List.of(tax));

        Deduction deduction = new Deduction();
        deduction.setAmount("5.00");
        emp.setDeductions(List.of(deduction));

        response.setEmployeeCompensations(List.of(emp));
    }

    @Test
    void testMapAllFrom_withFullData_shouldCreateTransactions() {
        List<PayrollTransactionEntity> result = PayrollTransactionEntityMapper.INSTANCE.mapAllFrom(
                response, srcEvtId, actorEntpPrtyId, srcPayrollId, omnibusAcctId
        );

        assertEquals(3, result.size());

        assertTrue(result.stream().anyMatch(txn -> "EMPLOYEE".equals(txn.getTxnTypeNm())));
        assertTrue(result.stream().anyMatch(txn -> "TAX".equals(txn.getTxnTypeNm())));
        assertTrue(result.stream().anyMatch(txn -> "GARNISHMENT".equals(txn.getTxnTypeNm())));
    }

    @Test
    void testMapAllFrom_withNullTaxesAndDeductions_shouldCreateOnlyEmployeeTransaction() {
        EmployeeCompensations emp = new EmployeeCompensations();
        emp.setEmployeeUuid("EMP456");
        emp.setNetPay("100.00");
        emp.setCheckAmount("100.00");
        emp.setPaymentType("direct_deposit");

        response.setEmployeeCompensations(List.of(emp));

        List<PayrollTransactionEntity> result = PayrollTransactionEntityMapper.INSTANCE.mapAllFrom(
                response, srcEvtId, actorEntpPrtyId, srcPayrollId, omnibusAcctId
        );

        assertEquals(1, result.size());
        assertEquals("EMPLOYEE", result.get(0).getTxnTypeNm());
    }

    @Test
    void testMapAllFrom_withNullEmployeeCompensations_shouldReturnEmptyList() {
        response.setEmployeeCompensations(null);

        List<PayrollTransactionEntity> result = PayrollTransactionEntityMapper.INSTANCE.mapAllFrom(
                response, srcEvtId, actorEntpPrtyId, srcPayrollId, omnibusAcctId
        );

        assertTrue(result.isEmpty());
    }

    @Test
    void testMapAllFrom_withEmptyEmployeeCompensations_shouldReturnEmptyList() {
        response.setEmployeeCompensations(Collections.emptyList());

        List<PayrollTransactionEntity> result = PayrollTransactionEntityMapper.INSTANCE.mapAllFrom(
                response, srcEvtId, actorEntpPrtyId, srcPayrollId, omnibusAcctId
        );

        assertTrue(result.isEmpty());
    }

    @Test
    void testMapAllFrom_withNullNetPay_shouldStillProcessOtherTransactions() {
        EmployeeCompensations emp = new EmployeeCompensations();
        emp.setEmployeeUuid("EMP789");
        emp.setNetPay(null);
        emp.setCheckAmount("150.00");
        emp.setPaymentType("check");

        Tax tax = new Tax();
        tax.setAmount("10.00");
        emp.setTaxes(List.of(tax));
        emp.setDeductions(null);

        response.setEmployeeCompensations(List.of(emp));

        List<PayrollTransactionEntity> result = PayrollTransactionEntityMapper.INSTANCE.mapAllFrom(
                response, srcEvtId, actorEntpPrtyId, srcPayrollId, omnibusAcctId
        );

        assertEquals(1, result.size());
        assertEquals("TAX", result.get(0).getTxnTypeNm());
    }
}
