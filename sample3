package net.jpmchase.payroll.processor.steps.payroll;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.jpmchase.payroll.processor.Step;
import net.jpmchase.payroll.processor.WorkFlowContext;
import net.jpmchase.payroll.processor.exception.ProcessorException;
import net.jpmchase.payroll.processor.repository.HolidayCalendarRepository;
import net.jpmchase.payroll.processor.repository.PayrollRepository;
import net.jpmchase.payroll.processor.util.DateTimeUtil;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;

@Slf4j
@Component
@RequiredArgsConstructor
public class ValidatePayrollProcessingWindowStep implements Step {

    private final HolidayCalendarRepository holidayCalendarRepository;
    private final PayrollRepository payrollRepository;

    @Value("${payroll.processing.cutoff-time}")
    private String cutoffTimeStr;

    @Override
    public void execute(WorkFlowContext context) {
        String payrollId = context.get("SRC_PYRL_ID", String.class);
        LocalDateTime eventReceivedTime = context.get("EVENT_RECEIVED_TS", LocalDateTime.class); // should be populated in read step

        log.info("[STEP] Validating processing window for payrollId={}, receivedAt={}", payrollId, eventReceivedTime);

        // 1. Validate cutoff time
        LocalTime cutoffTime = LocalTime.parse(cutoffTimeStr); // e.g., "18:30"
        if (eventReceivedTime.toLocalTime().isAfter(cutoffTime)) {
            throw new ProcessorException("CUTOFF_TIME_EXCEEDED", "Webhook received after cutoff time: " + cutoffTimeStr);
        }

        // 2. Validate business day (not weekend and not holiday)
        LocalDate processingDate = eventReceivedTime.toLocalDate();
        if (DateTimeUtil.isWeekend(processingDate) || holidayCalendarRepository.existsByDate(processingDate)) {
            throw new ProcessorException("INVALID_PROCESSING_DAY", "Today is not a valid processing day: " + processingDate);
        }

        // 3. Validate payroll record exists
        boolean exists = payrollRepository.existsBySrcPayrollId(payrollId);
        if (!exists) {
            throw new ProcessorException("PAYROLL_NOT_FOUND", "No payroll record found for: " + payrollId);
        }

        log.info("[STEP] Processing window validated successfully for payrollId={}", payrollId);
    }
}
package net.jpmchase.payroll.processor.util;

import java.time.DayOfWeek;
import java.time.LocalDate;

public class DateTimeUtil {

    public static boolean isWeekend(LocalDate date) {
        return date.getDayOfWeek() == DayOfWeek.SATURDAY ||
               date.getDayOfWeek() == DayOfWeek.SUNDAY;
    }
}@Repository
public interface HolidayRepository extends JpaRepository<HolidayEntity, LocalDate> {
    boolean existsByHolidayDate(LocalDate holidayDate);
}
@Service
@RequiredArgsConstructor
public class HolidayService {

    private final HolidayRepository holidayRepository;

    public boolean isHoliday(LocalDate date) {
        return holidayRepository.existsByHolidayDate(date);
    }

    public LocalDate getNextBusinessDay(LocalDate date) {
        LocalDate next = date;
        while (isHoliday(next) || next.getDayOfWeek() == DayOfWeek.SATURDAY || next.getDayOfWeek() == DayOfWeek.SUNDAY) {
            next = next.plusDays(1);
        }
        return next;
    }
}@Component
@RequiredArgsConstructor
@Slf4j
public class ValidatePayrollProcessingWindowStep implements Step {

    @Value("${payroll.cutoff.hour}")
    private int cutoffHour;

    private final HolidayService holidayService;
    private final PayrollRepository payrollRepository;

    @Override
    public void execute(WorkflowContext context) {
        String srcPayrollId = context.get(SRC_PAYROLL_ID, String.class);
        String timestampStr = context.get(TIMESTAMP, String.class);
        GetPayrollResponse payrollResponse = context.get(GUSTO_SINGLE_PAYROLL, GetPayrollResponse.class);

        ZonedDateTime receivedTime = Instant.ofEpochSecond(Long.parseLong(timestampStr)).atZone(ZoneId.systemDefault());
        LocalTime eventTime = receivedTime.toLocalTime();

        if (eventTime.getHour() >= cutoffHour) {
            throw new ProcessorException(CUTOFF_TIME_BREACHED, "Webhook received after cutoff hour");
        }

        LocalDate procDate = payrollResponse.getProcDt();
        if (holidayService.isHoliday(procDate) || isWeekend(procDate)) {
            throw new ProcessorException(NOT_A_BUSINESS_DAY, "Processing date is not a valid business day");
        }

        boolean exists = payrollRepository.findBySrcPayrollId(srcPayrollId).isPresent();
        if (!exists) {
            throw new ProcessorException(PAYROLL_RECORD_NOT_FOUND, "Payroll record missing");
        }

        log.info("[STEP] Payroll processing window is valid for payrollId={}", srcPayrollId);
    }

    private boolean isWeekend(LocalDate date) {
        return date.getDayOfWeek() == DayOfWeek.SATURDAY || date.getDayOfWeek() == DayOfWeek.SUNDAY;
    }
}
