@ExtendWith(MockitoExtension.class)
class ReconcileEmployeePaymentServiceTest {

    @Mock private PayeeRepository payeeRepository;
    @Mock private PayeeAccountRepository payeeAccountRepository;
    @Mock private PayeePersistenceService payeePersistenceService;
    @Mock private PayeeAccountPersistenceService payeeAccountPersistenceService;
    @Mock private EmployeeService employeeService;

    @InjectMocks
    private ReconcileEmployeePaymentService service;

    private WorkflowContext context;

    @BeforeEach
    void setup() {
        MockitoAnnotations.openMocks(this);
        context = new WorkflowContext();
        context.put(WorkflowContextUtil.COMPANY_UUID, "comp1");
        context.put(WorkflowContextUtil.PAYROLL_ENTITY, mock(PayrollEntity.class));
        context.put(WorkflowContextUtil.COMPANY_ENROLLMENT, mock(EnrollmentEntity.class));
    }

    @Test
    void testReconcile_checkWithEmptySplits_shouldPass() {
        EmployeeResponse employeeResponse = mock(EmployeeResponse.class);
        when(employeeService.getEmployee(anyString(), eq("comp1"))).thenReturn(employeeResponse);

        EmployeeCompensations comp = new EmployeeCompensations();
        comp.setEmployeeUuid("emp1");
        comp.setPaymentMethod(PaymentMethod.Check);

        EmployeePaymentConfiguration config = new EmployeePaymentConfiguration();
        config.setPaymentMethod(PaymentMethod.Check.name());
        config.setSplits(Collections.emptyList());

        service.reconcile(comp, config, context);

        verifyNoInteractions(payeePersistenceService);
        verifyNoInteractions(payeeAccountPersistenceService);
    }

    @Test
    void testReconcile_directDepositWithEmptySplits_shouldFail() {
        EmployeeResponse mockEmployeeResponse = mock(EmployeeResponse.class);
        when(employeeService.getEmployee(anyString(), anyString())).thenReturn(mockEmployeeResponse);

        EmployeeCompensations comp = new EmployeeCompensations();
        comp.setEmployeeUuid("emp2");
        comp.setPaymentMethod(PaymentMethod.DirectDeposit);

        EmployeePaymentConfiguration config = new EmployeePaymentConfiguration();
        config.setPaymentMethod(PaymentMethod.DirectDeposit.name());
        config.setSplits(Collections.emptyList());

        ProcessorException ex = assertThrows(ProcessorException.class, () ->
            service.reconcile(comp, config, context));

        assertTrue(ex.getMessage().contains("BANK_ACCOUNT_NOT_FOUND"));
    }

    @Test
    void testReconcile_missingPayee_shouldSyncFromGusto() {
        EmployeeCompensations comp = new EmployeeCompensations();
        comp.setEmployeeUuid("emp3");
        comp.setPaymentMethod(PaymentMethod.DirectDeposit);

        Split split = new Split();
        split.setBankAccountUUID("uuid1");
        split.setBankAccountName("ABC");
        split.setRoutingNumber("123");
        split.setAccountNumber("456");
        split.setPriority(1);

        EmployeePaymentConfiguration config = new EmployeePaymentConfiguration();
        config.setPaymentMethod(PaymentMethod.DirectDeposit.name());
        config.setSplits(List.of(split));

        EmployeeResponse mockEmployeeResponse = mock(EmployeeResponse.class);
        PayeeEntity mockPayee = new PayeeEntity();
        mockPayee.setSrcPayeeId("emp3");

        when(payeeRepository.findBySrcPayeeId("emp3")).thenReturn(Optional.empty());
        when(employeeService.getEmployee(anyString(), eq("emp3"))).thenReturn(mockEmployeeResponse);
        when(payeePersistenceService.saveAndFlushWithAudit(any())).thenReturn(mockPayee);
        when(payeeAccountRepository.findBySourcePayeeId("emp3")).thenReturn(Optional.of(Collections.emptyList()));

        service.reconcile(comp, config, context);

        verify(payeePersistenceService).saveAndFlushWithAudit(any());
        verify(payeeAccountPersistenceService).saveWithAudit(any(PayeeAccountEntity.class));
    }

    @Test
    void testReconcile_existingPayeeAccountMismatch_shouldUpdate() {
        EmployeeCompensations comp = new EmployeeCompensations();
        comp.setEmployeeUuid("emp4");
        comp.setPaymentMethod(PaymentMethod.DirectDeposit);

        Split split = new Split();
        split.setBankAccountUUID("uuid1");
        split.setBankAccountName("Mismatch");
        split.setRoutingNumber("999");
        split.setAccountNumber("888");
        split.setPriority(1);

        EmployeePaymentConfiguration config = new EmployeePaymentConfiguration();
        config.setPaymentMethod(PaymentMethod.DirectDeposit.name());
        config.setSplits(List.of(split));

        PayeeEntity payee = new PayeeEntity();
        payee.setSrcPayeeId("emp4");

        PayeeAccountEntity account = new PayeeAccountEntity();
        account.setSrcBnkId("uuid1");
        account.setBnkNm("Different");
        account.setRtnb("777");
        account.setActNb("666");
        account.setPyrPayeeAcctId("acct-1");

        EmployeeResponse employeeResponse = new EmployeeResponse();

        when(payeeRepository.findBySrcPayeeId("emp4")).thenReturn(Optional.of(payee));
        when(payeeAccountRepository.findBySourcePayeeId("emp4")).thenReturn(Optional.of(List.of(account)));
        when(employeeService.getEmployee(anyString(), anyString())).thenReturn(employeeResponse);

        service.reconcile(comp, config, context);

        verify(payeeAccountPersistenceService, atLeastOnce()).saveWithAudit(any(PayeeAccountEntity.class));
    }

    @Test
    void testReconcile_allValid_shouldSucceed() {
        EmployeeCompensations comp = new EmployeeCompensations();
        comp.setEmployeeUuid("emp5");
        comp.setPaymentMethod(PaymentMethod.DirectDeposit);

        Split split = new Split();
        split.setBankAccountUUID("uuid1");
        split.setBankAccountName("BankX");
        split.setRoutingNumber("123");
        split.setAccountNumber("456");
        split.setPriority(1);

        EmployeePaymentConfiguration config = new EmployeePaymentConfiguration();
        config.setPaymentMethod(PaymentMethod.DirectDeposit.name());
        config.setSplits(List.of(split));

        PayeeEntity payee = new PayeeEntity();
        payee.setSrcPayeeId("emp5");

        PayeeAccountEntity account = new PayeeAccountEntity();
        account.setSrcBnkId("uuid1");
        account.setBnkNm("BankX");
        account.setRtnb("123");
        account.setActNb("456");

        when(payeeRepository.findBySrcPayeeId("emp5")).thenReturn(Optional.of(payee));
        when(payeeAccountRepository.findBySourcePayeeId("emp5")).thenReturn(Optional.of(List.of(account)));
        when(employeeService.getEmployee(anyString(), anyString())).thenReturn(new EmployeeResponse());

        service.reconcile(comp, config, context);

        verify(payeeAccountPersistenceService, never()).saveWithAudit(any());
    }
}