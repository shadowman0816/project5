import net.jpmchase.payroll.processor.repository.mgmt.entity.payee.PayeeAccountEntity;
import net.jpmchase.payroll.processor.repository.mgmt.entity.payee.PayeeEntity;
import net.jpmchase.payroll.processor.service.CounterPartyService;
import net.jpmchase.payroll.processor.service.PayeeAccountPersistenceService;
import net.jpmchase.payroll.processor.service.PayeeAccountToSBPReconService;
import net.jpmchase.payroll.processor.steps.utils.ProcessorException;
import net.jpmchase.payroll.processor.steps.utils.ProcessorExceptionType;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class PayeeAccountToSBPReconServiceTest {

    private CounterPartyService counterPartyService;
    private PayeeAccountPersistenceService payeeAccountPersistenceService;
    private PayeeAccountToSBPReconService service;

    @BeforeEach
    void setup() {
        counterPartyService = mock(CounterPartyService.class);
        payeeAccountPersistenceService = mock(PayeeAccountPersistenceService.class);
        service = new PayeeAccountToSBPReconService(counterPartyService, payeeAccountPersistenceService);
    }

    @Test
    void testPublishNewAccountsToSBP_successful() {
        List<Account> sbpAccounts = List.of(new Account("acc1"));
        PayeeEntity payee = new PayeeEntity();
        payee.setCntprId("CNT123");

        when(counterPartyService.addAccountsToCounterparty(anyLong(), anyString(), anyList()))
                .thenReturn(Optional.of(new CounterPartyAccountAddResponse()));

        assertDoesNotThrow(() ->
                service.publishNewAccountsToSBP(sbpAccounts, 123L, payee, new HashMap<>())
        );
    }

    @Test
    void testPublishNewAccountsToSBP_nullResponse_shouldThrow() {
        List<Account> sbpAccounts = List.of(new Account("acc1"));
        PayeeEntity payee = new PayeeEntity();
        payee.setCntprId("CNT123");

        when(counterPartyService.addAccountsToCounterparty(anyLong(), anyString(), anyList()))
                .thenReturn(Optional.empty());

        ProcessorException ex = assertThrows(ProcessorException.class, () ->
                service.publishNewAccountsToSBP(sbpAccounts, 123L, payee, new HashMap<>())
        );
        assertEquals(ProcessorExceptionType.INFRA_RETRYABLE, ex.getType());
    }

    @Test
    void testPublishExistingAccountsToSBP_successful() {
        List<Account> sbpAccounts = List.of(new Account("acc1"));
        PayeeEntity payee = new PayeeEntity();
        payee.setCntprId("CNT123");

        when(counterPartyService.updateAccountForCounterparty(anyLong(), anyString(), any()))
                .thenReturn(Optional.of(new CounterPartyAccountUpdateResponse()));

        assertDoesNotThrow(() ->
                service.publishExistingAccountsToSBP(sbpAccounts, 123L, payee)
        );
    }

    @Test
    void testPublishExistingAccountsToSBP_nullResponse_shouldThrow() {
        List<Account> sbpAccounts = List.of(new Account("acc1"));
        PayeeEntity payee = new PayeeEntity();
        payee.setCntprId("CNT123");

        when(counterPartyService.updateAccountForCounterparty(anyLong(), anyString(), any()))
                .thenReturn(Optional.empty());

        ProcessorException ex = assertThrows(ProcessorException.class, () ->
                service.publishExistingAccountsToSBP(sbpAccounts, 123L, payee)
        );
        assertEquals(ProcessorExceptionType.INFRA_RETRYABLE, ex.getType());
    }

    @Test
    void testGenerateSBPAccounts_returnsAccountsAndUpdatesMap() {
        PayeeAccountEntity entity1 = new PayeeAccountEntity();
        entity1.setCntprAcctId("ACCT123");
        entity1.setSrcsBnkId("SBP01");

        PayeeAccountEntity entity2 = new PayeeAccountEntity();
        entity2.setCntprAcctId("ACCT456");
        entity2.setSrcsBnkId("SBP02");

        List<PayeeAccountEntity> payeeAccounts = List.of(entity1, entity2);
        Map<String, PayeeAccountEntity> map = new HashMap<>();

        List<Account> result = service.generateSBPAccounts(payeeAccounts, map);

        assertEquals(2, result.size());
        assertTrue(map.containsKey("SBP01"));
        assertTrue(map.containsKey("SBP02"));
    }
}