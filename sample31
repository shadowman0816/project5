public void publishNewAccountsToSBP(
        final List<Account> sbpAccounts,
        final Long profileId,
        final PayeeEntity payeeEntity,
        final Map<String, PayeeAccountEntity> payeeAccountsUpdatedMap) {

    if (CollectionUtils.isEmpty(sbpAccounts)) {
        return;
    }

    Try.of(() -> counterPartyService.addAccountsToACounterparty(profileId, payeeEntity.getCntrpId(), sbpAccounts))
        .onSuccess(counterpartyAddResponse -> {
            if (counterpartyAddResponse != null) {

                Optional.ofNullable(counterpartyAddResponse.getError())
                    .ifPresent(error -> log.error("Counterparty: {} with profileId: {} failed to add accounts to SBP with error: {}",
                            payeeEntity.getCntrpId(), profileId, error));

                Optional.ofNullable(counterpartyAddResponse.getAccountErrors())
                    .filter(errors -> !CollectionUtils.isEmpty(errors))
                    .ifPresent(errors -> errors.forEach(accountError -> {
                        Optional.ofNullable(accountError.getAccountInfo())
                            .map(AccountInfo::getPartnerAccountCorrelationIdentifier)
                            .ifPresent(payeeAccountsUpdatedMap::remove);

                        log.error("Counterparty: {} with profileId: {} failed to add account: {} in SBP with error: {}",
                                payeeEntity.getCntrpId(), profileId, 
                                accountError.getAccountIdentifier(), accountError.getError());
                    }));

                Optional.ofNullable(counterpartyAddResponse.getAccounts())
                    .filter(accounts -> !CollectionUtils.isEmpty(accounts))
                    .ifPresent(accounts -> accounts.forEach(account -> {
                        Optional.ofNullable(account.getPartnerAccountCorrelationIdentifier())
                                .map(payeeAccountsUpdatedMap::get)
                                .ifPresent(payeeAccountEntity -> 
                                        payeeAccountEntity.setCntrpAcctId(account.getAccountIdentifier()));
                    }));
            } else {
                log.error("Counterparty: {} with profileId: {} received a null response when adding accounts to SBP.",
                        payeeEntity.getCntrpId(), profileId);
            }

            List<PayeeAccountEntity> validAccounts = payeeAccountsUpdatedMap.values().stream()
                    .filter(entity -> StringUtils.isNotBlank(entity.getCntrpAcctId()))
                    .collect(Collectors.toList());

            payeeAccountPersistenceService.saveAndFlushAllWithAudit(validAccounts);
        })
        .onFailure(throwable -> {
            throw ProcessorException.of(
                    ProcessorExceptionType.INFRA_RETRYABLE,
                    PUBLISH_PAYEE_ACCOUNT_TO_SBP_FAILED.getCode(),
                    PUBLISH_PAYEE_ACCOUNT_TO_SBP_FAILED);
        });
}