import net.jpmchase.payroll.processor.registry.*;
import net.jpmchase.payroll.processor.registry.config.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

class WorkflowRegistryTest {

    private WorkflowRegistry workflowRegistry;
    private WorkflowConfig workflowConfig;

    @BeforeEach
    void setUp() {
        workflowConfig = new WorkflowConfig();
        workflowRegistry = new WorkflowRegistry(workflowConfig);
    }

    @Test
    void testGetStepsForEvent_groupConfigMissing_returnsEmptyList() {
        List<StepConfig> steps = workflowRegistry.getStepsForEvent("ENTITY_A", "EVENT_1");
        assertTrue(steps.isEmpty());
    }

    @Test
    void testGetStepsForEvent_eventTypeMissing_returnsEmptyList() {
        StepGroupConfig groupConfig = new StepGroupConfig();
        workflowConfig.getGroups().put("ENTITY_A", groupConfig);

        List<StepConfig> steps = workflowRegistry.getStepsForEvent("ENTITY_A", "EVENT_MISSING");
        assertTrue(steps.isEmpty());
    }

    @Test
    void testGetStepsForEvent_withRetryAndSafResolution() {
        StepConfig step1 = new StepConfig();
        step1.setStepName("Step1");

        StepEventConfig eventConfig = new StepEventConfig(List.of(step1));
        StepGroupConfig groupConfig = new StepGroupConfig(true, true, Map.of("EVENT_X", eventConfig));
        groupConfig.setRetryConfigs(new RetryConfigs(3));
        groupConfig.setSafConfigs(new SafConfigs(5));

        workflowConfig.getGroups().put("ENTITY_X", groupConfig);

        List<StepConfig> steps = workflowRegistry.getStepsForEvent("ENTITY_X", "EVENT_X");

        assertEquals(1, steps.size());
        StepConfig result = steps.get(0);
        assertTrue(result.isRetryEnabled());
        assertTrue(result.isSafEnabled());
        assertEquals(3, result.getRetryConfigs().getMaxRetryCount());
        assertEquals(5, result.getSafConfigs().getMaxSafRetryCount());
    }

    @Test
    void testApplyRetryConfig_whenStepOverridesGroupAndWorkflow() {
        StepConfig step = new StepConfig();
        step.setRetryConfigs(new RetryConfigs(10)); // override
        step.setRetryEnabled(false);

        StepGroupConfig groupConfig = new StepGroupConfig(true, true, Collections.emptyMap());
        workflowConfig.setRetryEnabled(true);
        workflowConfig.setRetryConfigs(new RetryConfigs(5));

        workflowRegistry.applyRetryConfig(step, groupConfig);

        // Should not override since step already has retry config
        assertFalse(step.isRetryEnabled());
        assertEquals(10, step.getRetryConfigs().getMaxRetryCount());
    }

    @Test
    void testApplyRetryConfig_whenOnlyGroupHasRetryConfig() {
        StepConfig step = new StepConfig();

        StepGroupConfig groupConfig = new StepGroupConfig(true, true, Collections.emptyMap());
        groupConfig.setRetryConfigs(new RetryConfigs(3));

        workflowRegistry.applyRetryConfig(step, groupConfig);

        assertTrue(step.isRetryEnabled());
        assertEquals(3, step.getRetryConfigs().getMaxRetryCount());
    }

    @Test
    void testApplyRetryConfig_whenOnlyWorkflowHasRetryConfig() {
        StepConfig step = new StepConfig();

        StepGroupConfig groupConfig = new StepGroupConfig(false, false, Collections.emptyMap());

        workflowConfig.setRetryEnabled(true);
        workflowConfig.setRetryConfigs(new RetryConfigs(4));

        workflowRegistry.applyRetryConfig(step, groupConfig);

        assertTrue(step.isRetryEnabled());
        assertEquals(4, step.getRetryConfigs().getMaxRetryCount());
    }

    @Test
    void testApplySafConfig_whenStepOverridesGroupAndWorkflow() {
        StepConfig step = new StepConfig();
        step.setSafConfigs(new SafConfigs(9)); // override
        step.setSafEnabled(true);

        StepGroupConfig groupConfig = new StepGroupConfig(true, true, Collections.emptyMap());
        workflowConfig.setSafEnabled(true);
        workflowConfig.setSafConfigs(new SafConfigs(2));

        workflowRegistry.applySafConfig(step, groupConfig);

        // Should not override since step already has SAF config
        assertTrue(step.isSafEnabled());
        assertEquals(9, step.getSafConfigs().getMaxSafRetryCount());
    }

    @Test
    void testApplySafConfig_whenOnlyGroupHasSafConfig() {
        StepConfig step = new StepConfig();

        StepGroupConfig groupConfig = new StepGroupConfig(true, true, Collections.emptyMap());
        groupConfig.setSafConfigs(new SafConfigs(7));

        workflowRegistry.applySafConfig(step, groupConfig);

        assertTrue(step.isSafEnabled());
        assertEquals(7, step.getSafConfigs().getMaxSafRetryCount());
    }

    @Test
    void testApplySafConfig_whenOnlyWorkflowHasSafConfig() {
        StepConfig step = new StepConfig();

        StepGroupConfig groupConfig = new StepGroupConfig(false, false, Collections.emptyMap());

        workflowConfig.setSafEnabled(true);
        workflowConfig.setSafConfigs(new SafConfigs(8));

        workflowRegistry.applySafConfig(step, groupConfig);

        assertTrue(step.isSafEnabled());
        assertEquals(8, step.getSafConfigs().getMaxSafRetryCount());
    }

    @Test
    void testGetRetryCountForStep_whenNullStep() {
        assertEquals(0, workflowRegistry.getRetryCountForStep(null));
    }

    @Test
    void testGetRetryCountForStep_whenStepHasNoRetryConfig() {
        StepConfig step = new StepConfig();
        assertEquals(0, workflowRegistry.getRetryCountForStep(step));
    }

    @Test
    void testGetRetryCountForStep_withRetryConfig() {
        StepConfig step = new StepConfig();
        step.setRetryConfigs(new RetryConfigs(6));
        assertEquals(6, workflowRegistry.getRetryCountForStep(step));
    }
}
