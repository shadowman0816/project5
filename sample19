package net.jpmchase.payroll.processor.registry;

import net.jpmchase.payroll.processor.common.config.GroupConfig;
import net.jpmchase.payroll.processor.common.config.StepConfig;
import net.jpmchase.payroll.processor.common.config.WorkFlowConfig;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class WorkFlowRegistryTest {

    private WorkFlowRegistry registry;
    private WorkFlowConfig workflowConfig;

    @BeforeEach
    void setup() {
        workflowConfig = new WorkFlowConfig();
        registry = new WorkFlowRegistry(workflowConfig);
    }

    @Test
    void testGetStepsForEvent_groupNotFound_returnsEmptyList() {
        workflowConfig.setGroups(Collections.emptyMap());

        List<StepConfig> result = registry.getStepsForEvent("entityA", "eventA");

        assertNotNull(result);
        assertTrue(result.isEmpty());
    }

    @Test
    void testGetStepsForEvent_eventNotFound_returnsEmptyList() {
        GroupConfig groupConfig = new GroupConfig();
        groupConfig.setEvents(Collections.emptyMap());

        Map<String, GroupConfig> groupMap = new HashMap<>();
        groupMap.put("entityA", groupConfig);
        workflowConfig.setGroups(groupMap);

        List<StepConfig> result = registry.getStepsForEvent("entityA", "eventX");

        assertNotNull(result);
        assertTrue(result.isEmpty());
    }

    @Test
    void testGetStepsForEvent_withRetryAndSafSetFromStepLevel() {
        StepConfig step = new StepConfig();
        step.setName("step1");
        step.setRetryEnabled(true);
        step.setSafEnabled(true);
        step.setRetryConfigs(new StepConfig.RetryConfig());
        step.setSafConfigs(new StepConfig.SafConfig());

        GroupConfig groupConfig = new GroupConfig();
        groupConfig.setEvents(Map.of("eventA", List.of(step)));

        workflowConfig.setGroups(Map.of("entityA", groupConfig));

        List<StepConfig> steps = registry.getStepsForEvent("entityA", "eventA");

        assertEquals(1, steps.size());
        assertTrue(steps.get(0).isRetryEnabled());
        assertTrue(steps.get(0).isSafEnabled());
    }

    @Test
    void testGetStepsForEvent_retryFallbackToGroupLevel() {
        StepConfig step = new StepConfig();
        step.setName("step1");
        step.setRetryEnabled(false);
        step.setRetryConfigs(null); // trigger fallback

        StepConfig.RetryConfig groupRetry = new StepConfig.RetryConfig();
        groupRetry.setMaxRetryCount(5);

        GroupConfig groupConfig = new GroupConfig();
        groupConfig.setRetryEnabled(true);
        groupConfig.setRetryConfigs(groupRetry);
        groupConfig.setEvents(Map.of("eventA", List.of(step)));

        workflowConfig.setGroups(Map.of("entityA", groupConfig));

        List<StepConfig> steps = registry.getStepsForEvent("entityA", "eventA");

        assertTrue(steps.get(0).isRetryEnabled());
        assertEquals(5, steps.get(0).getRetryConfigs().getMaxRetryCount());
    }

    @Test
    void testGetStepsForEvent_retryFallbackToWorkflowLevel() {
        StepConfig step = new StepConfig();
        step.setName("step1");
        step.setRetryEnabled(false);
        step.setRetryConfigs(null);

        StepConfig.RetryConfig wfRetry = new StepConfig.RetryConfig();
        wfRetry.setMaxRetryCount(7);
        workflowConfig.setRetryEnabled(true);
        workflowConfig.setRetryConfigs(wfRetry);

        GroupConfig groupConfig = new GroupConfig();
        groupConfig.setRetryEnabled(false); // fallback needed
        groupConfig.setEvents(Map.of("eventA", List.of(step)));

        workflowConfig.setGroups(Map.of("entityA", groupConfig));

        List<StepConfig> steps = registry.getStepsForEvent("entityA", "eventA");

        assertTrue(steps.get(0).isRetryEnabled());
        assertEquals(7, steps.get(0).getRetryConfigs().getMaxRetryCount());
    }

    @Test
    void testApplySafConfig_fallbackToGroupAndWorkflow() {
        StepConfig step = new StepConfig();
        step.setName("step1");
        step.setSafEnabled(false);
        step.setSafConfigs(null);

        StepConfig.SafConfig groupSaf = new StepConfig.SafConfig();
        groupSaf.setEnabled(true);

        StepConfig.SafConfig wfSaf = new StepConfig.SafConfig();
        wfSaf.setEnabled(true);

        GroupConfig groupConfig = new GroupConfig();
        groupConfig.setSafEnabled(true);
        groupConfig.setSafConfigs(groupSaf);
        groupConfig.setEvents(Map.of("eventA", List.of(step)));

        workflowConfig.setSafEnabled(true);
        workflowConfig.setSafConfigs(wfSaf);
        workflowConfig.setGroups(Map.of("entityA", groupConfig));

        List<StepConfig> steps = registry.getStepsForEvent("entityA", "eventA");

        assertTrue(steps.get(0).isSafEnabled());
        assertEquals(groupSaf, steps.get(0).getSafConfigs());
    }

    @Test
    void testGetRetryForStep_returnsRetryCountSafely() {
        StepConfig step = new StepConfig();
        StepConfig.RetryConfig retry = new StepConfig.RetryConfig();
        retry.setMaxRetryCount(4);
        step.setRetryConfigs(retry);

        int result = registry.getRetryCountForStep(step);

        assertEquals(4, result);
    }

    @Test
    void testGetRetryForStep_nullSafe_returnsZero() {
        int result = registry.getRetryCountForStep(null);
        assertEquals(0, result);

        StepConfig step = new StepConfig();
        step.setRetryConfigs(null);

        result = registry.getRetryCountForStep(step);
        assertEquals(0, result);
    }
}