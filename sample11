@ExtendWith(MockitoExtension.class)
class ReconcileEmployeePaymentServiceTest {

    @InjectMocks
    private ReconcileEmployeePaymentService reconcileService;

    private static final String EMPLOYEE_ID = "emp-123";
    private static final String ROUTING = "011000015";
    private static final String ACCOUNT = "123456789";

    @Test
    void shouldPassWhenAllSplitsMatchPayeeAccounts() {
        EmployeeCompensations emp = new EmployeeCompensations();
        emp.setEmployeeUuid(EMPLOYEE_ID);
        emp.setPaymentMethod(PaymentMethod.DirectDeposit);

        EmployeePaymentConfiguration config = new EmployeePaymentConfiguration();
        config.setPaymentMethod(PaymentMethod.DirectDeposit.name());
        config.setSplits(List.of(new Split(ROUTING, ACCOUNT)));

        PayeeAccountEntity payeeAccount = new PayeeAccountEntity();
        payeeAccount.setRtN(ROUTING);
        payeeAccount.setAcctNo(ACCOUNT);

        assertDoesNotThrow(() ->
            reconcileService.reconcile(emp, config, List.of(payeeAccount))
        );
    }

    @Test
    void shouldThrowWhenSplitAccountDoesNotMatchAnyPayeeAccount() {
        EmployeeCompensations emp = new EmployeeCompensations();
        emp.setEmployeeUuid(EMPLOYEE_ID);
        emp.setPaymentMethod(PaymentMethod.DirectDeposit);

        EmployeePaymentConfiguration config = new EmployeePaymentConfiguration();
        config.setPaymentMethod(PaymentMethod.DirectDeposit.name());
        config.setSplits(List.of(new Split("000000000", "999999999")));

        PayeeAccountEntity payeeAccount = new PayeeAccountEntity();
        payeeAccount.setRtN(ROUTING);
        payeeAccount.setAcctNo(ACCOUNT);

        ProcessorException ex = assertThrows(ProcessorException.class, () ->
            reconcileService.reconcile(emp, config, List.of(payeeAccount))
        );

        assertEquals(ErrorCode.GUSTO_BANK_ACCOUNT_NOT_FOUND_IN_PYRL, ex.getCode());
    }

    @Test
    void shouldThrowWhenEmployeeIdIsNull() {
        EmployeeCompensations emp = new EmployeeCompensations(); // No UUID
        emp.setPaymentMethod(PaymentMethod.DirectDeposit);

        EmployeePaymentConfiguration config = new EmployeePaymentConfiguration();
        config.setPaymentMethod(PaymentMethod.DirectDeposit.name());
        config.setSplits(List.of(new Split(ROUTING, ACCOUNT)));

        assertThrows(ProcessorException.class, () ->
            reconcileService.reconcile(emp, config, List.of())
        );
    }

    @Test
    void shouldThrowWhenSplitsAreEmpty() {
        EmployeeCompensations emp = new EmployeeCompensations();
        emp.setEmployeeUuid(EMPLOYEE_ID);
        emp.setPaymentMethod(PaymentMethod.DirectDeposit);

        EmployeePaymentConfiguration config = new EmployeePaymentConfiguration();
        config.setPaymentMethod(PaymentMethod.DirectDeposit.name());
        config.setSplits(Collections.emptyList());

        assertThrows(ProcessorException.class, () ->
            reconcileService.reconcile(emp, config, List.of())
        );
    }

    @Test
    void shouldThrowWhenPaymentMethodMismatch() {
        EmployeeCompensations emp = new EmployeeCompensations();
        emp.setEmployeeUuid(EMPLOYEE_ID);
        emp.setPaymentMethod(PaymentMethod.Check);

        EmployeePaymentConfiguration config = new EmployeePaymentConfiguration();
        config.setPaymentMethod(PaymentMethod.DirectDeposit.name());
        config.setSplits(List.of(new Split(ROUTING, ACCOUNT)));

        assertThrows(ProcessorException.class, () ->
            reconcileService.reconcile(emp, config, List.of())
        );
    }
}
package net.jpmchase.payroll.processor.steps.payroll;

import net.jpmchase.payroll.processor.remote.gusto.model.payroll.GetPayrollResponse;
import net.jpmchase.payroll.processor.repository.enrl.entity.EnrollmentEntity;
import net.jpmchase.payroll.processor.repository.mgmt.entity.PayeeAccountEntity;
import net.jpmchase.payroll.processor.service.ReconcileEmployeePaymentService;
import net.jpmchase.payroll.processor.service.retrieval.PaymentConfigurationService;
import net.jpmchase.payroll.processor.steps.common.WorkflowContext;
import net.jpmchase.payroll.processor.steps.common.WorkflowContextUtil;
import net.jpmchase.payroll.processor.steps.utils.ErrorCode;
import net.jpmchase.payroll.processor.steps.utils.ProcessorException;
import net.jpmchase.payroll.processor.steps.workflow.Step;
import net.jpmchase.payroll.processor.repository.mgmt.PayeeAccountRepository;
import net.jpmchase.payroll.processor.remote.gusto.model.payroll.EmployeeCompensations;
import net.jpmchase.payroll.processor.remote.gusto.model.payroll.Split;
import net.jpmchase.payroll.processor.remote.gusto.model.payroll.EmployeePaymentConfiguration;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class ReconcileEmployeePaymentInformationStepTest {

    private ReconcileEmployeePaymentInformationStep step;
    private ReconcileEmployeePaymentService reconcileService;
    private PaymentConfigurationService paymentConfigurationService;
    private PayeeAccountRepository payeeAccountRepository;

    private WorkflowContext context;
    private GetPayrollResponse payrollResponse;
    private EnrollmentEntity enrollmentEntity;

    @BeforeEach
    void setup() {
        reconcileService = mock(ReconcileEmployeePaymentService.class);
        paymentConfigurationService = mock(PaymentConfigurationService.class);
        payeeAccountRepository = mock(PayeeAccountRepository.class);
        step = new ReconcileEmployeePaymentInformationStep(reconcileService, paymentConfigurationService, payeeAccountRepository);

        context = new WorkflowContext();
        payrollResponse = new GetPayrollResponse();
        enrollmentEntity = new EnrollmentEntity();

        context.put("GUSTO_SINGLE_PAYROLL", payrollResponse);
        context.put("COMPANY_ENROLLMENT", enrollmentEntity);
        context.put("COMPANY_UUID", "company-123");
    }

    @Test
    void shouldSkipWhenNoEmployeeCompensations() {
        payrollResponse.setEmployeeCompensations(null);

        step.execute(context);

        // No exception should be thrown and step completes
        assertTrue(context.getKeys().isEmpty() || !context.getKeys().contains("BANK_ACCOUNT_TO_PAYEE_ACCOUNT_MAP"));
    }

    @Test
    void shouldThrowExceptionWhenPayeeAccountsMissing() {
        EmployeeCompensations empComp = new EmployeeCompensations();
        empComp.setEmployeeUuid("emp-1");
        payrollResponse.setEmployeeCompensations(List.of(empComp));

        when(paymentConfigurationService.getPaymentConfigurationsForAnEmployee(any(), any(), eq("emp-1")))
                .thenReturn(new EmployeePaymentConfiguration());

        when(payeeAccountRepository.findBySourcePayeeId("emp-1")).thenReturn(Collections.emptyList());

        ProcessorException ex = assertThrows(ProcessorException.class, () -> step.execute(context));
        assertEquals(ErrorCode.EMPLOYEE_BANK_ACCOUNTS_NOT_FOUND_PYRL.getCode(), ex.getCode());
    }

    @Test
    void shouldMapBankAccountsCorrectly() {
        String employeeId = "emp-1";
        String bankUuid = "bank-uuid";
        String payeeAccountId = "payee-account-id";

        EmployeeCompensations empComp = new EmployeeCompensations();
        empComp.setEmployeeUuid(employeeId);
        payrollResponse.setEmployeeCompensations(List.of(empComp));

        Split split = new Split();
        split.setBankAccountUuid(bankUuid);
        EmployeePaymentConfiguration config = new EmployeePaymentConfiguration();
        config.setSplits(List.of(split));

        when(paymentConfigurationService.getPaymentConfigurationsForAnEmployee(any(), any(), eq(employeeId)))
                .thenReturn(config);

        PayeeAccountEntity payeeAccount = new PayeeAccountEntity();
        payeeAccount.setSrcBnkId(bankUuid);
        payeeAccount.setPyrllPayeeAcctId(payeeAccountId);

        when(payeeAccountRepository.findBySourcePayeeId(employeeId))
                .thenReturn(List.of(payeeAccount));

        step.execute(context);

        Map<String, String> result = context.get("BANK_ACCOUNT_TO_PAYEE_ACCOUNT_MAP", Map.class);
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals(payeeAccountId, result.get(bankUuid));
    }

    @Test
    void shouldNotPutMapIfNoSplits() {
        EmployeeCompensations empComp = new EmployeeCompensations();
        empComp.setEmployeeUuid("emp-1");
        payrollResponse.setEmployeeCompensations(List.of(empComp));

        EmployeePaymentConfiguration config = new EmployeePaymentConfiguration();
        config.setSplits(null);

        when(paymentConfigurationService.getPaymentConfigurationsForAnEmployee(any(), any(), any()))
                .thenReturn(config);

        step.execute(context);

        assertFalse(context.getKeys().contains("BANK_ACCOUNT_TO_PAYEE_ACCOUNT_MAP"));
    }
}
@BeforeEach
void setup() {
    empComp = new EmployeeCompensations();
    empComp.setEmployeeUuid("emp-123");
    empComp.setMemo("Memo Text");
    empComp.setCheckAmount(new BigDecimal("250.75"));
    empComp.setPaymentMethod(PaymentMethod.DirectDeposit);

    response = new GetPayrollResponse();
    response.setEmployeeCompensations(Collections.singletonList(empComp));
    response.setProcessedDate(LocalDate.now().toString());

    EmployeePaymentConfiguration config = new EmployeePaymentConfiguration();
    config.setEmployeeId("emp-123");
    config.setSplitBy("amount");
    config.setSplits(Collections.emptyList()); // Or a real list if needed

    paymentConfigurations = Collections.singletonList(config);
}
@ExtendWith(MockitoExtension.class)
class EmployeeTransactionUtilTest {

    private static final String SRC_PAYROLL_ID = "srcPayroll123";
    private static final String SRC_EVENT_ID = "event456";
    private static final String EMPLOYEE_ID = "emp-123";
    private static final String PAYEE_ACCT_ID = "payeeAcctId";
    private static final String PROC_DATE = "2025-05-06";
    private static final BigDecimal CHECK_AMT = new BigDecimal("1000.00");

    @Test
    void testGenerateEmployeeTransactions_withPercentageSplit() {
        EmployeeCompensations emp = new EmployeeCompensations();
        emp.setEmployeeUuid(EMPLOYEE_ID);
        emp.setCheckAmount(CHECK_AMT);
        emp.setPaymentMethod(PaymentMethod.DirectDeposit);

        EmployeePaymentConfiguration config = new EmployeePaymentConfiguration();
        config.setEmployeeId(EMPLOYEE_ID);
        config.setSplitsBy("PERCENTAGE");

        Split split = new Split();
        split.setSplitAmount("50");
        split.setBankAccountUuid("bank-123");

        config.setSplits(List.of(split));

        Map<String, String> map = Map.of("bank-123", PAYEE_ACCT_ID);

        List<EmployeeTransactionEntity> txns = EmployeeTransactionUtil.generateEmployeeTransactions(
                emp, config, map, PROC_DATE, SRC_PAYROLL_ID, SRC_EVENT_ID, CHECK_AMT
        );

        assertEquals(1, txns.size());
        assertEquals(new BigDecimal("500.00"), txns.get(0).getTxnAm());
    }

    @Test
    void testGenerateEmployeeTransactions_withMismatchAmount_throwsException() {
        EmployeeCompensations emp = new EmployeeCompensations();
        emp.setEmployeeUuid(EMPLOYEE_ID);
        emp.setCheckAmount(CHECK_AMT);
        emp.setPaymentMethod(PaymentMethod.DirectDeposit);

        EmployeePaymentConfiguration config = new EmployeePaymentConfiguration();
        config.setEmployeeId(EMPLOYEE_ID);
        config.setSplitsBy("PERCENTAGE");

        Split split1 = new Split();
        split1.setSplitAmount("40");
        split1.setBankAccountUuid("bank-1");

        Split split2 = new Split();
        split2.setSplitAmount("40");
        split2.setBankAccountUuid("bank-2");

        config.setSplits(List.of(split1, split2));
        Map<String, String> map = Map.of("bank-1", "acct-1", "bank-2", "acct-2");

        ProcessorException ex = assertThrows(ProcessorException.class, () ->
            EmployeeTransactionMapper.INSTANCE.mapAllFrom(
                createResponse(emp), List.of(config), SRC_PAYROLL_ID, SRC_EVENT_ID, map)
        );

        assertTrue(ex.getMessage().contains("SPLIT_AMOUNT_TOTAL_MISMATCH"));
    }

    private GetPayrollResponse createResponse(EmployeeCompensations emp) {
        GetPayrollResponse response = new GetPayrollResponse();
        response.setEmployeeCompensations(List.of(emp));
        response.setProcessedDate(PROC_DATE);
        return response;
    }
}
package net.jpmchase.payroll.processor.repository.mgmt.mapper;

import net.jpmchase.payroll.processor.remote.gusto.model.payroll.*;
import net.jpmchase.payroll.processor.repository.mgmt.entity.EmployeeTransactionEntity;
import net.jpmchase.payroll.processor.repository.mgmt.entity.enums.PayrollStatus;
import net.jpmchase.payroll.processor.steps.utils.EmployeeTransactionUtil;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.time.LocalDate;
import java.util.Collections;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

class EmployeeTransactionMapperTest {

    private GetPayrollResponse response;
    private EmployeeCompensations empComp;
    private EmployeePaymentConfiguration config;
    private final String srcPayrollId = "srcPayrollId";
    private final String srcEventId = "srcEventId";
    private final String payeeAccountId = "payeeAccountId";
    private final String bankAccountUuid = "bankAccountUuid";

    private Map<String, String> bankAccountToPayeeAccountMap;

    @BeforeEach
    void setup() {
        empComp = new EmployeeCompensations();
        empComp.setEmployeeUuid("emp-123");
        empComp.setMemo("Memo Text");
        empComp.setCheckAmount(new BigDecimal("250.75"));
        empComp.setPaymentMethod(PaymentMethod.DirectDeposit);

        response = new GetPayrollResponse();
        response.setEmployeeCompensations(Collections.singletonList(empComp));
        response.setProcessedDate(LocalDate.now().toString());

        config = new EmployeePaymentConfiguration();
        config.setEmployeeId("emp-123");
        config.setSplitBy("PERCENTAGE");

        Split split = new Split();
        split.setSplitAmount("100");
        split.setBankAccountUuid(bankAccountUuid);
        config.setSplits(Collections.singletonList(split));

        bankAccountToPayeeAccountMap = Map.of(bankAccountUuid, payeeAccountId);
    }

    @Test
    void test_mapAllFrom_returnsTransactions() {
        List<EmployeeTransactionEntity> result = EmployeeTransactionMapper.INSTANCE.mapAllFrom(
            response, List.of(config), srcPayrollId, srcEventId, bankAccountToPayeeAccountMap
        );

        assertEquals(1, result.size());
        EmployeeTransactionEntity txn = result.get(0);
        assertEquals(srcEventId, txn.getSrcEvtId());
        assertEquals(new BigDecimal("250.75"), txn.getTxnAm());
        assertEquals(PayrollStatus.PENDING.getCode(), txn.getPayeeTxnStsCd());
        assertEquals(payeeAccountId, txn.getPyrlPayeeAcctId());
    }

    @Test
    void test_mapAllFrom_withEmptyEmployeeList_returnsEmptyList() {
        response.setEmployeeCompensations(Collections.emptyList());
        List<EmployeeTransactionEntity> result = EmployeeTransactionMapper.INSTANCE.mapAllFrom(
            response, List.of(config), srcPayrollId, srcEventId, bankAccountToPayeeAccountMap
        );
        assertTrue(result.isEmpty());
    }

    @Test
    void test_mapAllFrom_withNullCheckAmount_setsZeroTxnAm() {
        empComp.setCheckAmount(null);
        List<EmployeeTransactionEntity> result = EmployeeTransactionMapper.INSTANCE.mapAllFrom(
            response, List.of(config), srcPayrollId, srcEventId, bankAccountToPayeeAccountMap
        );
        assertEquals(BigDecimal.ZERO, result.get(0).getTxnAm());
    }

    @Test
    void test_mapAllFrom_withPaymentMethodNull_defaultsToCheckCalculation() {
        empComp.setPaymentMethod(null);
        List<EmployeeTransactionEntity> result = EmployeeTransactionMapper.INSTANCE.mapAllFrom(
            response, List.of(config), srcPayrollId, srcEventId, bankAccountToPayeeAccountMap
        );
        assertNotNull(result.get(0).getTxnAm());
    }

    @Test
    void test_mapAllFrom_setsDefaultAuditFields() {
        List<EmployeeTransactionEntity> result = EmployeeTransactionMapper.INSTANCE.mapAllFrom(
            response, List.of(config), srcPayrollId, srcEventId, bankAccountToPayeeAccountMap
        );
        EmployeeTransactionEntity txn = result.get(0);
        assertEquals("SYSTEM_USER", txn.getCreUsrId());
        assertEquals("SYSTEM_USER", txn.getUpdtUsrId());
        assertNotNull(txn.getCreTs());
        assertNotNull(txn.getUpdtTs());
    }

    @Test
    void test_mapAllFrom_splitMismatch_throwsProcessorException() {
        config.getSplits().get(0).setSplitAmount("50"); // Only 50% instead of 100%
        Exception ex = assertThrows(RuntimeException.class, () -> {
            EmployeeTransactionMapper.INSTANCE.mapAllFrom(
                response, List.of(config), srcPayrollId, srcEventId, bankAccountToPayeeAccountMap
            );
        });
        assertTrue(ex.getMessage().contains("SPLIT_AMOUNT_TOTAL_MISMATCH"));
    }
}