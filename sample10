BigDecimal totalAllocated = BigDecimal.ZERO;
List<EmployeeTransactionEntity> transactions = new ArrayList<>();

for (EmployeePaymentConfiguration config : paymentConfigurations) {
    String splitBy = config.getSplitBy();
    BigDecimal splitValue = new BigDecimal(config.getSplitAmount());
    BigDecimal amount;

    if ("percentage".equalsIgnoreCase(splitBy)) {
        amount = totalAmount.multiply(splitValue).divide(BigDecimal.valueOf(100), 2, RoundingMode.HALF_UP);
    } else {
        amount = splitValue;
    }

    totalAllocated = totalAllocated.add(amount);

    transactions.add(buildTransaction(
        procDate, srcPayrollId, employeeId, emp.getMemo(), amount,
        PaymentMethod.DirectDeposit.equals(emp.getPaymentMethod()) ?
            PayrollCalculationUtils.calculateDirectDepositEmployeeCompensation(response) :
            PayrollCalculationUtils.calculateCheckEmployeeCompensation(response),
        PayrollStatus.PENDING, srcEventId, emp.getPaymentMethod(), now
    ));
}

// Final validation
BigDecimal leftover = totalAmount.subtract(totalAllocated);
if (leftover.compareTo(BigDecimal.ZERO) < 0) {
    throw new IllegalArgumentException("Split total exceeds allocated amount");
}
if (leftover.compareTo(new BigDecimal("0.01")) > 0) {
    throw new IllegalArgumentException("Unallocated remainder exists: " + leftover);
}

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.List;

public class EmployeeTransactionUtil {

    public static List<EmployeeTransactionEntity> generateEmployeeTransactions(
        String employeeId,
        BigDecimal checkAmount,
        List<EmployeePaymentSplit> splits,
        String payrollId
    ) {
        List<EmployeeTransactionEntity> transactions = new ArrayList<>();
        BigDecimal calculatedTotal = BigDecimal.ZERO;

        for (EmployeePaymentSplit split : splits) {
            BigDecimal splitAmount;

            if ("PERCENTAGE".equalsIgnoreCase(split.getSplitBy())) {
                BigDecimal percentage = new BigDecimal(split.getSplitAmount());
                splitAmount = checkAmount.multiply(percentage).divide(BigDecimal.valueOf(100), 2, RoundingMode.HALF_UP);
            } else if ("AMOUNT".equalsIgnoreCase(split.getSplitBy())) {
                splitAmount = new BigDecimal(split.getSplitAmount());
            } else {
                throw new ProcessorException("Invalid splitBy value for employeeId=" + employeeId + ": " + split.getSplitBy());
            }

            calculatedTotal = calculatedTotal.add(splitAmount);

            EmployeeTransactionEntity entity = new EmployeeTransactionEntity();
            entity.setEmployeeId(employeeId);
            entity.setPayrollId(payrollId);
            entity.setTransactionAmount(splitAmount);
            entity.setAccountNumber(split.getAccountNumber());
            entity.setRoutingNumber(split.getRoutingNumber());
            entity.setTransactionType("EMPLOYEE_PAYMENT");
            entity.setStatus("PENDING");

            transactions.add(entity);
        }

        // Validate that total equals original check amount within acceptable precision
        if (calculatedTotal.subtract(checkAmount).abs().compareTo(BigDecimal.valueOf(0.01)) > 0) {
            throw new ProcessorException(String.format(
                "Split total mismatch for employeeId=%s: expected=%s, actual=%s",
                employeeId, checkAmount, calculatedTotal
            ));
        }

        return transactions;
    }
}
