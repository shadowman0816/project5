BigDecimal totalAllocated = BigDecimal.ZERO;
List<EmployeeTransactionEntity> transactions = new ArrayList<>();

for (EmployeePaymentConfiguration config : paymentConfigurations) {
    String splitBy = config.getSplitBy();
    BigDecimal splitValue = new BigDecimal(config.getSplitAmount());
    BigDecimal amount;

    if ("percentage".equalsIgnoreCase(splitBy)) {
        amount = totalAmount.multiply(splitValue).divide(BigDecimal.valueOf(100), 2, RoundingMode.HALF_UP);
    } else {
        amount = splitValue;
    }

    totalAllocated = totalAllocated.add(amount);

    transactions.add(buildTransaction(
        procDate, srcPayrollId, employeeId, emp.getMemo(), amount,
        PaymentMethod.DirectDeposit.equals(emp.getPaymentMethod()) ?
            PayrollCalculationUtils.calculateDirectDepositEmployeeCompensation(response) :
            PayrollCalculationUtils.calculateCheckEmployeeCompensation(response),
        PayrollStatus.PENDING, srcEventId, emp.getPaymentMethod(), now
    ));
}

// Final validation
BigDecimal leftover = totalAmount.subtract(totalAllocated);
if (leftover.compareTo(BigDecimal.ZERO) < 0) {
    throw new IllegalArgumentException("Split total exceeds allocated amount");
}
if (leftover.compareTo(new BigDecimal("0.01")) > 0) {
    throw new IllegalArgumentException("Unallocated remainder exists: " + leftover);
}

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.List;

public class EmployeeTransactionUtil {

    public static List<EmployeeTransactionEntity> generateEmployeeTransactions(
        String employeeId,
        BigDecimal checkAmount,
        List<EmployeePaymentSplit> splits,
        String payrollId
    ) {
        List<EmployeeTransactionEntity> transactions = new ArrayList<>();
        BigDecimal calculatedTotal = BigDecimal.ZERO;

        for (EmployeePaymentSplit split : splits) {
            BigDecimal splitAmount;

            if ("PERCENTAGE".equalsIgnoreCase(split.getSplitBy())) {
                BigDecimal percentage = new BigDecimal(split.getSplitAmount());
                splitAmount = checkAmount.multiply(percentage).divide(BigDecimal.valueOf(100), 2, RoundingMode.HALF_UP);
            } else if ("AMOUNT".equalsIgnoreCase(split.getSplitBy())) {
                splitAmount = new BigDecimal(split.getSplitAmount());
            } else {
                throw new ProcessorException("Invalid splitBy value for employeeId=" + employeeId + ": " + split.getSplitBy());
            }

            calculatedTotal = calculatedTotal.add(splitAmount);

            EmployeeTransactionEntity entity = new EmployeeTransactionEntity();
            entity.setEmployeeId(employeeId);
            entity.setPayrollId(payrollId);
            entity.setTransactionAmount(splitAmount);
            entity.setAccountNumber(split.getAccountNumber());
            entity.setRoutingNumber(split.getRoutingNumber());
            entity.setTransactionType("EMPLOYEE_PAYMENT");
            entity.setStatus("PENDING");

            transactions.add(entity);
        }

        // Validate that total equals original check amount within acceptable precision
        if (calculatedTotal.subtract(checkAmount).abs().compareTo(BigDecimal.valueOf(0.01)) > 0) {
            throw new ProcessorException(String.format(
                "Split total mismatch for employeeId=%s: expected=%s, actual=%s",
                employeeId, checkAmount, calculatedTotal
            ));
        }

        return transactions;
    }
}
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.List;

public class EmployeeTransactionUtil {

    public static List<EmployeeTransactionEntity> generateEmployeeTransactions(
        String employeeId,
        BigDecimal checkAmount,
        String splitsBy, // "PERCENTAGE" or "AMOUNT"
        List<EmployeePaymentSplit> splits,
        String payrollId
    ) {
        List<EmployeeTransactionEntity> transactions = new ArrayList<>();
        BigDecimal calculatedTotal = BigDecimal.ZERO;

        for (EmployeePaymentSplit split : splits) {
            BigDecimal splitAmount;

            if ("PERCENTAGE".equalsIgnoreCase(splitsBy)) {
                BigDecimal percentage = new BigDecimal(split.getSplitAmount());
                splitAmount = checkAmount.multiply(percentage).divide(BigDecimal.valueOf(100), 2, RoundingMode.HALF_UP);
            } else if ("AMOUNT".equalsIgnoreCase(splitsBy)) {
                splitAmount = new BigDecimal(split.getSplitAmount());
            } else {
                throw new ProcessorException("Invalid splitsBy value for employeeId=" + employeeId + ": " + splitsBy);
            }

            calculatedTotal = calculatedTotal.add(splitAmount);

            EmployeeTransactionEntity entity = new EmployeeTransactionEntity();
            entity.setEmployeeId(employeeId);
            entity.setPayrollId(payrollId);
            entity.setTransactionAmount(splitAmount);
            entity.setAccountNumber(split.getAccountNumber());
            entity.setRoutingNumber(split.getRoutingNumber());
            entity.setTransactionType("EMPLOYEE_PAYMENT");
            entity.setStatus("PENDING");

            transactions.add(entity);
        }

        // Validate that total equals original check amount within acceptable precision
        if (calculatedTotal.subtract(checkAmount).abs().compareTo(BigDecimal.valueOf(0.01)) > 0) {
            throw new ProcessorException(String.format(
                "Split total mismatch for employeeId=%s: expected=%s, actual=%s",
                employeeId, checkAmount, calculatedTotal
            ));
        }

        return transactions;
    }
}
@Component("ReconcileAndMergeEmployeePaymentConfigurations")
@RequiredArgsConstructor
@Slf4j
public class ReconcileEmployeePaymentInformationStep implements Step {

    private final ReconcileEmployeePaymentService reconcileService;
    private final PayeeAccountRepository payeeAccountRepository;

    @Override
    public void execute(WorkflowContext context) {
        GetPayrollResponse payrollResponse = context.get(GUSTO_SINGLE_PAYROLL, GetPayrollResponse.class);
        EnrollmentEntity enrollmentEntity = context.get(COMPANY_ENROLLMENT, EnrollmentEntity.class);
        String companyId = context.get(COMPANY_UUID, String.class);

        if (payrollResponse.getEmployeeCompensations() == null) {
            log.info("[STEP] Reconcile with Employee Payment configuration step skipped for companyId={}", companyId);
            return;
        }

        Map<String, String> bankAccountUuidToPayeeAccountId = new ConcurrentHashMap<>();

        payrollResponse.getEmployeeCompensations().forEach(employeeComp -> {
            List<Split> splits = employeeComp.getSplits(); // Assuming this exists on EmployeeCompensations

            // Fail if no splits (optional)
            if (splits == null || splits.isEmpty()) {
                throw new ProcessorException(EMPLOYEE_BANK_ACCOUNTS_NOT_FOUND_PYRL.getCode(),
                        EMPLOYEE_BANK_ACCOUNTS_NOT_FOUND_PYRL.formatMessage(employeeComp.getEmployeeUuid()));
            }

            // Step 1: Reconcile
            reconcileService.reconcile(employeeComp,
                    enrollmentEntity.getRelEntPrtyId(),
                    companyId,
                    payrollResponse.getEmployeeCompensations());

            // Step 2: Map bankAccountUuid -> payrollPayeeAccountId
            for (Split split : splits) {
                String bankAccountUuid = split.getBankAccountUuid();
                Optional<PayeeAccountEntity> optionalPayeeAcct = payeeAccountRepository
                        .findBySourcePayeeIdAndBankAccountUuid(employeeComp.getEmployeeUuid(), bankAccountUuid);

                if (optionalPayeeAcct.isEmpty()) {
                    throw new ProcessorException(EMPLOYEE_BANK_ACCOUNTS_NOT_FOUND_PYRL.getCode(),
                            EMPLOYEE_BANK_ACCOUNTS_NOT_FOUND_PYRL.formatMessage(bankAccountUuid));
                }

                bankAccountUuidToPayeeAccountId.put(bankAccountUuid, optionalPayeeAcct.get().getId());
            }
        });

        context.put(BANK_ACCOUNT_TO_PAYROLL_ACCOUNT_MAPPING, bankAccountUuidToPayeeAccountId);
        log.info("[STEP] Reconcile with Employee Payment Configuration step completed for companyId={}", companyId);
    }
}

@Component("ReconcileAndMergeEmployeePaymentConfigurations")
@RequiredArgsConstructor
@Slf4j
public class ReconcileEmployeePaymentInformationStep implements Step {

    private final ReconcileEmployeePaymentService reconcileService;
    private final PaymentConfigurationService paymentConfigurationService;
    private final PayeeAccountRepository payeeAccountRepository;

    @Override
    public void execute(WorkflowContext context) {
        GetPayrollResponse payrollResponse = context.get(GUSTO_SINGLE_PAYROLL, GetPayrollResponse.class);
        EnrollmentEntity enrollmentEntity = context.get(COMPANY_ENROLLMENT, EnrollmentEntity.class);
        String companyId = context.get(COMPANY_UUID, String.class);

        if (payrollResponse.getEmployeeCompensations() == null) {
            log.info("[STEP] Reconcile with Employee Payment Configuration step skipped for companyId={}", companyId);
            return;
        }

        // For each employee
        payrollResponse.getEmployeeCompensations().forEach(employeeComp -> {
            String employeeId = employeeComp.getEmployeeUuid();

            // 1. Fetch the employee-specific configuration
            EmployeePaymentConfiguration config = paymentConfigurationService
                    .getPaymentConfigurationsForAnEmployee(
                            enrollmentEntity.getRelEntPrrtyId(), companyId, employeeId
                    );

            if (config == null || config.getSplits() == null) return;

            // 2. Build the bankAccountUuid -> payrollPayeeAccountId map
            Map<String, String> bankAccountToPayeeAccountMap = new HashMap<>();
            for (EmployeePaymentConfiguration.Split split : config.getSplits()) {
                String bankAccountUuid = split.getBankAccountUuid();
                payeeAccountRepository.findBySourcePayeeId(bankAccountUuid).forEach(payeeAccount -> {
                    bankAccountToPayeeAccountMap.put(bankAccountUuid, payeeAccount.getPayeeAccountId());
                });
            }

            // 3. Store it in the context for downstream use (optional)
            context.put("BANK_TO_PAYEE_MAP_" + employeeId, bankAccountToPayeeAccountMap);

            // 4. Proceed with reconciliation
            reconcileService.reconcile(employeeComp, config, companyId);
        });

        log.info("[STEP] Reconcile with Employee Payment Configuration step completed for companyId={}", companyId);
    }
}