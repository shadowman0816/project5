package net.jpmchase.payroll.processor.steps.payroll;

import net.jpmchase.payroll.processor.model.gusto.GetPayrollResponse;
import net.jpmchase.payroll.processor.model.gusto.EmployeeCompensation;
import net.jpmchase.payroll.processor.repository.mgmt.entity.EnrollmentEntity;
import net.jpmchase.payroll.processor.service.ReconcileEmployeePaymentService;
import net.jpmchase.payroll.processor.steps.context.WorkflowContext;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.Collections;

import static org.mockito.Mockito.*;

class ReconcileEmployeePaymentInformationStepTest {

    private ReconcileEmployeePaymentInformationStep step;
    private ReconcileEmployeePaymentService reconcileService;
    private WorkflowContext context;

    @BeforeEach
    void setUp() {
        reconcileService = mock(ReconcileEmployeePaymentService.class);
        step = new ReconcileEmployeePaymentInformationStep(reconcileService);
        context = mock(WorkflowContext.class);
    }

    @Test
    void testExecute_withValidCompensations_shouldCallReconcile() {
        GetPayrollResponse response = mock(GetPayrollResponse.class);
        EnrollmentEntity enrollmentEntity = mock(EnrollmentEntity.class);
        EmployeeCompensation emp1 = mock(EmployeeCompensation.class);
        EmployeeCompensation emp2 = mock(EmployeeCompensation.class);

        when(context.get(eq("GUSTO_SINGLE_PAYROLL"), eq(GetPayrollResponse.class))).thenReturn(response);
        when(context.get(eq("COMPANY_ENROLLMENT"), eq(EnrollmentEntity.class))).thenReturn(enrollmentEntity);
        when(context.get(eq("COMPANY_UUID"), eq(String.class))).thenReturn("company-123");
        when(response.getEmployeeCompensations()).thenReturn(Arrays.asList(emp1, emp2));
        when(enrollmentEntity.getRelEntpPrtyId()).thenReturn(100L);

        step.execute(context);

        verify(reconcileService).reconcile(emp1, 100L, "company-123");
        verify(reconcileService).reconcile(emp2, 100L, "company-123");
    }

    @Test
    void testExecute_withNoCompensations_shouldNotCallReconcile() {
        GetPayrollResponse response = mock(GetPayrollResponse.class);
        EnrollmentEntity enrollmentEntity = mock(EnrollmentEntity.class);

        when(context.get(eq("GUSTO_SINGLE_PAYROLL"), eq(GetPayrollResponse.class))).thenReturn(response);
        when(context.get(eq("COMPANY_ENROLLMENT"), eq(EnrollmentEntity.class))).thenReturn(enrollmentEntity);
        when(context.get(eq("COMPANY_UUID"), eq(String.class))).thenReturn("company-123");
        when(response.getEmployeeCompensations()).thenReturn(Collections.emptyList());

        step.execute(context);

        verify(reconcileService, never()).reconcile(any(), anyLong(), anyString());
    }

    @Test
    void testExecute_withNullCompensations_shouldNotCallReconcile() {
        GetPayrollResponse response = mock(GetPayrollResponse.class);
        EnrollmentEntity enrollmentEntity = mock(EnrollmentEntity.class);

        when(context.get(eq("GUSTO_SINGLE_PAYROLL"), eq(GetPayrollResponse.class))).thenReturn(response);
        when(context.get(eq("COMPANY_ENROLLMENT"), eq(EnrollmentEntity.class))).thenReturn(enrollmentEntity);
        when(context.get(eq("COMPANY_UUID"), eq(String.class))).thenReturn("company-123");
        when(response.getEmployeeCompensations()).thenReturn(null);

        step.execute(context);

        verify(reconcileService, never()).reconcile(any(), anyLong(), anyString());
    }
}
@ExtendWith(MockitoExtension.class)
class ReadIncomingPayrollProcessedEventStepTest {

    @InjectMocks
    private ReadIncomingPayrollProcessedEventStep step;

    @Mock
    private WorkflowContext context;

    @Test
    void testExecute_withValidEvent_shouldPopulateContext() {
        UUID payrollId = UUID.randomUUID();
        UUID companyId = UUID.randomUUID();
        String messageId = "msg123";
        long timestamp = System.currentTimeMillis();

        Event event = mock(Event.class);
        MessageBody messageBody = mock(MessageBody.class);

        when(context.get(Event.class)).thenReturn(event);
        when(event.getMessageId()).thenReturn(messageId);
        when(event.getMessageBody()).thenReturn(messageBody);
        when(messageBody.getPayrollId()).thenReturn(payrollId);
        when(messageBody.getCompanyUuid()).thenReturn(companyId);
        when(messageBody.getTimestamp()).thenReturn(timestamp);

        step.execute(context);

        verify(context).put(eq(AppConstants.PAYROLL_ID), eq(payrollId));
        verify(context).put(eq(AppConstants.COMPANY_UUID), eq(companyId));
        verify(context).put(eq(AppConstants.MESSAGE_ID), eq(messageId));
        verify(context).put(eq(AppConstants.PAYEE_TYPE), eq(PayeeType.EMPLOYEE.name()));
        verify(context).put(eq(AppConstants.TIMESTAMP), eq(timestamp));
    }

    @Test
    void testExecute_missingPayrollId_shouldThrowException() {
        Event event = mock(Event.class);
        MessageBody messageBody = mock(MessageBody.class);

        when(context.get(Event.class)).thenReturn(event);
        when(event.getMessageBody()).thenReturn(messageBody);
        when(event.getMessageId()).thenReturn("msg123");
        when(messageBody.getPayrollId()).thenReturn(null);

        ProcessorException ex = assertThrows(ProcessorException.class, () -> step.execute(context));
        assertTrue(ex.getMessage().contains("Message Id"));
    }

    @Test
    void testExecute_missingCompanyUuid_shouldThrowException() {
        UUID payrollId = UUID.randomUUID();
        Event event = mock(Event.class);
        MessageBody messageBody = mock(MessageBody.class);

        when(context.get(Event.class)).thenReturn(event);
        when(event.getMessageBody()).thenReturn(messageBody);
        when(event.getMessageId()).thenReturn("msg123");
        when(messageBody.getPayrollId()).thenReturn(payrollId);
        when(messageBody.getCompanyUuid()).thenReturn(null);

        ProcessorException ex = assertThrows(ProcessorException.class, () -> step.execute(context));
        assertTrue(ex.getMessage().contains("Company UUID"));
    }

    @Test
    void testExecute_missingTimestamp_shouldThrowException() {
        UUID payrollId = UUID.randomUUID();
        UUID companyId = UUID.randomUUID();
        Event event = mock(Event.class);
        MessageBody messageBody = mock(MessageBody.class);

        when(context.get(Event.class)).thenReturn(event);
        when(event.getMessageBody()).thenReturn(messageBody);
        when(event.getMessageId()).thenReturn("msg123");
        when(messageBody.getPayrollId()).thenReturn(payrollId);
        when(messageBody.getCompanyUuid()).thenReturn(companyId);
        when(messageBody.getTimestamp()).thenReturn(null);

        ProcessorException ex = assertThrows(ProcessorException.class, () -> step.execute(context));
        assertTrue(ex.getMessage().contains("Timestamp"));
    }
}
