package net.jpmchase.payroll.processor.common.config;

import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class StepConfig {

    private String name;
    private String description;
    private String executeOnCondition;
    private boolean retryEnabled;       // replaces disableRetry
    private boolean cancellable;

    private RetryConfig retryConfigs;   // immediate retry
    private SafConfig safConfig;        // SAF == store and forward (was backoffRetry)

    @Getter
    @Setter
    public static class RetryConfig {
        private int maxRetryCount;
        private String retryBackoff; // e.g. "100ms"
    }

    @Getter
    @Setter
    public static class SafConfig {
        private boolean enabled;
        private int maxBackoffHours;
        private String cutoffTime; // e.g. "18:30"
    }
}
package net.jpmchase.payroll.processor.common.config;

import lombok.Getter;
import lombok.Setter;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

@Getter
@Setter
@Component
@ConfigurationProperties(prefix = "workflow")
public class WorkFlowConfig {

    private boolean retryEnabled;
    private StepConfig.RetryConfig retryConfigs;   // for workflow-level retry
    private StepConfig.SafConfig safConfig;         // for workflow-level SAF (store-and-forward)

    // Map<EventType, Map<EntityType, List<StepConfig>>>
    private Map<String, Map<String, List<StepConfig>>> groups = new ConcurrentHashMap<>();
}
