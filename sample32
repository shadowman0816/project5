CREATE TABLE message_templates (
    id UUID PRIMARY KEY,
    template_code VARCHAR(100) NOT NULL UNIQUE,
    channel VARCHAR(20) NOT NULL,
    subject_template TEXT,
    body_template TEXT NOT NULL,
    variables JSONB, -- here
    created_at TIMESTAMP DEFAULT now(),
    updated_at TIMESTAMP DEFAULT now()
);

-- Find templates that use "payroll_id"
SELECT * FROM message_templates
WHERE variables @> '["payroll_id"]'::jsonb;

SELECT template_code, jsonb_array_length(variables)
FROM message_templates;

CREATE TABLE template_variants (
    id UUID PRIMARY KEY,
    template_definition_id UUID REFERENCES template_definitions(id),
    channel VARCHAR(20) CHECK (channel IN ('EMAIL', 'DASHBOARD')),
    locale VARCHAR(10) DEFAULT 'en_US',
    subject_template TEXT,  -- optional
    body_template TEXT NOT NULL,
    version INTEGER DEFAULT 1,
    variables JSONB,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT now(),
    updated_at TIMESTAMP DEFAULT now()
);

CREATE TABLE template_definitions (
    id UUID PRIMARY KEY,
    template_code VARCHAR(100) UNIQUE NOT NULL,
    description TEXT,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT now(),
    updated_at TIMESTAMP DEFAULT now()
);

CREATE TABLE message_templates (
    id UUID PRIMARY KEY,
    
    template_code VARCHAR(100) NOT NULL UNIQUE,
    
    channel VARCHAR(20) NOT NULL CHECK (channel IN ('EMAIL', 'DASHBOARD')),  -- optional if splitting by channel
    
    locale VARCHAR(10) DEFAULT 'en_US',  -- for future localization support
    
    subject_template TEXT,  -- only for EMAIL
    body_template TEXT NOT NULL,
    
    variables JSONB,  -- list of expected variables (optional for validation/documentation)
    
    is_active BOOLEAN DEFAULT true,
    
    version INTEGER DEFAULT 1,
    
    created_at TIMESTAMP DEFAULT now(),
    updated_at TIMESTAMP DEFAULT now()
);
{
  "referenceId": "abc-123",
  "channels": [
    {
      "channel": "EMAIL",
      "to": "ops-team@yourcompany.com",
      "subject": "Payroll Processing Failed",
      "message": "Payroll abc-123 failed due to Insufficient funds."
    },
    {
      "channel": "DASHBOARD",
      "toUserId": "manager-001",
      "message": "Payroll abc-123 failed due to Insufficient funds."
    }
  ]
}
{
  "payroll_id": "abc-123",
  "reason": "Insufficient funds"
}
{
  "templateCode": "PAYROLL_FAILURE",
  "context": {
    "payroll_id": "abc-123",
    "reason": "Insufficient funds"
  },
  "referenceId": "abc-123",
  "sendTo": {
    "email": "ops-team@yourcompany.com",
    "dashboardUserId": "manager-001"
  },
  "channels": ["EMAIL", "DASHBOARD"]
}

{
  "referenceId": "abc-123",
  "channels": [
    {
      "channel": "EMAIL",
      "to": "ops-team@yourcompany.com",
      "subject": "Payroll Processing Failed",
      "message": "Payroll abc-123 failed due to Insufficient funds."
    },
    {
      "channel": "DASHBOARD",
      "toUserId": "manager-001",
      "message": "Payroll abc-123 failed due to Insufficient funds."
    }
  ]
}
public class NotificationService {
    public void handleCommEvent(CommEvent event) {
        Template template = templateRepo.findByCode(event.templateCode);
        String body = interpolate(template.bodyTemplate, event.context);
        String subject = template.subjectTemplate != null ? interpolate(template.subjectTemplate, event.context) : null;

        List<ChannelPayload> payloads = new ArrayList<>();

        if (event.channels.contains("EMAIL")) {
            payloads.add(new ChannelPayload("EMAIL", event.sendTo.email, subject, body, null));
        }
        if (event.channels.contains("DASHBOARD")) {
            payloads.add(new ChannelPayload("DASHBOARD", null, null, body, event.sendTo.dashboardUserId));
        }

        CIBPayload cibPayload = new CIBPayload(event.referenceId, event.templateCode, payloads);
        publishToCIB(cibPayload);
    }
}







