public static EmployeeResponse sample() {
    EmployeeResponse response = new EmployeeResponse();

    response.setUuid("emp-1234567890");
    response.setCompanyId("comp-9876543210");
    response.setManagerId("mgr-1122334455");
    response.setDepartment("Engineering");
    response.setTerminated(false);
    response.setTwoPercentShareholderIndicator(true);
    response.setOnboarded(true);

    response.setWorkEmail("john.doe@example.com");
    response.setCurrentEmploymentStatus("full_time");

    // Custom Fields
    CustomField customField = new CustomField();
    customField.setId("cf-001");
    customField.setCompanyCustomFieldId("ccf-001");
    customField.setName("Hobby");
    customField.setType("text");
    customField.setDescription("Employee hobby");
    customField.setValue("Photography");
    customField.setSelectionOptions(Arrays.asList("Photography", "Travel", "Reading"));
    response.setCustomFields(Set.of(customField));

    // Garnishment
    Garnishment garnishment = new Garnishment();
    garnishment.setUuid("garn-123");
    garnishment.setVersion("v1");
    garnishment.setEmployeeUuid("emp-1234567890");
    garnishment.setActive(true);
    garnishment.setAmount("50.00");
    garnishment.setDescription("Student loan garnishment");
    garnishment.setCourtOrdered(true);
    response.setGarnishments(Set.of(garnishment));

    // Child Support
    ChildSupport childSupport = new ChildSupport();
    childSupport.setState("NY");
    childSupport.setPaymentPeriod("Monthly");
    childSupport.setFipsCode("36001");
    childSupport.setCaseNumber("CSN-789");
    childSupport.setOrderNumber("ORD-456");
    childSupport.setRemittanceNumber("REM-123");
    response.setChildSupports(Set.of(childSupport));

    // Termination
    Termination termination = new Termination();
    termination.setUuid("term-456");
    termination.setVersion("v2");
    termination.setEmployeeUuid("emp-1234567890");
    termination.setActive(false);
    termination.setCancelable(true);
    termination.setEffectiveDate("2025-07-01");
    termination.setRunTerminationPayrollIndicator(true);
    response.setTerminations(Set.of(termination));

    // Paid Time Off
    PaidTimeOff pto = new PaidTimeOff();
    pto.setAccrualUnit("hours");
    pto.setAccrualRate("8");
    pto.setAccrualMethod("monthly");
    pto.setAccrualPeriod("monthly");
    pto.setAccrualBalance("16");
    pto.setMaximumAccrualBalance("120");
    pto.setPaidAtTerminationIndicator(true);
    response.setEligiblePaidTimeOff(Set.of(pto));

    return response;
}
import net.jpmchase.payroll.processor.service.persistence.EmployeeTransactionPersistenceService;
import net.jpmchase.payroll.processor.repository.EmployeeTransactionRepository;
import net.jpmchase.payroll.processor.repository.EmployeeTransactionAuditRepository;
import net.jpmchase.payroll.processor.model.entity.EmployeeTransactionEntity;
import net.jpmchase.payroll.processor.model.entity.EmployeeTransactionAuditEntity;
import net.jpmchase.payroll.processor.mapper.EmployeeTransactionAuditMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.List;
import java.util.Collections;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

class EmployeeTransactionPersistenceServiceTest {

    private EmployeeTransactionRepository employeeTransactionRepository;
    private EmployeeTransactionAuditRepository employeeTransactionAuditRepository;
    private EmployeeTransactionPersistenceService persistenceService;

    @BeforeEach
    void setUp() {
        employeeTransactionRepository = mock(EmployeeTransactionRepository.class);
        employeeTransactionAuditRepository = mock(EmployeeTransactionAuditRepository.class);
        persistenceService = new EmployeeTransactionPersistenceService(employeeTransactionRepository, employeeTransactionAuditRepository);
    }

    @Test
    void testSave() {
        EmployeeTransactionEntity entity = new EmployeeTransactionEntity();
        when(employeeTransactionRepository.save(entity)).thenReturn(entity);

        EmployeeTransactionEntity result = persistenceService.save(entity);
        assertNotNull(result);
        assertEquals(entity, result);
        verify(employeeTransactionRepository).save(entity);
    }

    @Test
    void testSaveAndFlush() {
        EmployeeTransactionEntity entity = new EmployeeTransactionEntity();
        when(employeeTransactionRepository.saveAndFlush(entity)).thenReturn(entity);

        EmployeeTransactionEntity result = persistenceService.saveAndFlush(entity);
        assertNotNull(result);
        assertEquals(entity, result);
        verify(employeeTransactionRepository).saveAndFlush(entity);
    }

    @Test
    void testSaveAll() {
        List<EmployeeTransactionEntity> entities = List.of(new EmployeeTransactionEntity());
        when(employeeTransactionRepository.saveAll(entities)).thenReturn(entities);

        List<EmployeeTransactionEntity> result = persistenceService.saveALL(entities);
        assertEquals(entities.size(), result.size());
        verify(employeeTransactionRepository).saveAll(entities);
    }

    @Test
    void testSaveAllAndFlush() {
        List<EmployeeTransactionEntity> entities = List.of(new EmployeeTransactionEntity());
        when(employeeTransactionRepository.saveAllAndFlush(entities)).thenReturn(entities);

        List<EmployeeTransactionEntity> result = persistenceService.saveALLAndFlush(entities);
        assertEquals(entities.size(), result.size());
        verify(employeeTransactionRepository).saveAllAndFlush(entities);
    }

    @Test
    void testSaveAllWithAudit() {
        EmployeeTransactionEntity entity = new EmployeeTransactionEntity();
        List<EmployeeTransactionEntity> entities = List.of(entity);

        EmployeeTransactionAuditEntity auditEntity = new EmployeeTransactionAuditEntity();
        EmployeeTransactionAuditMapper mapperMock = mock(EmployeeTransactionAuditMapper.class);
        setAuditMapperSingleton(mapperMock);

        when(mapperMock.toAuditEntity(entity)).thenReturn(auditEntity);
        when(employeeTransactionRepository.saveAll(entities)).thenReturn(entities);
        when(employeeTransactionAuditRepository.saveAll(List.of(auditEntity))).thenReturn(List.of(auditEntity));

        List<EmployeeTransactionEntity> result = persistenceService.saveALLWithAudit(entities);

        assertEquals(entities.size(), result.size());
        verify(employeeTransactionRepository).saveAll(entities);
        verify(employeeTransactionAuditRepository).saveAll(List.of(auditEntity));
    }

    @Test
    void testSaveAllAndFlushWithAudit() {
        EmployeeTransactionEntity entity = new EmployeeTransactionEntity();
        List<EmployeeTransactionEntity> entities = List.of(entity);

        EmployeeTransactionAuditEntity auditEntity = new EmployeeTransactionAuditEntity();
        EmployeeTransactionAuditMapper mapperMock = mock(EmployeeTransactionAuditMapper.class);
        setAuditMapperSingleton(mapperMock);

        when(mapperMock.toAuditEntity(entity)).thenReturn(auditEntity);
        when(employeeTransactionRepository.saveAllAndFlush(entities)).thenReturn(entities);
        when(employeeTransactionAuditRepository.saveAll(List.of(auditEntity))).thenReturn(List.of(auditEntity));

        List<EmployeeTransactionEntity> result = persistenceService.saveAndFlushALLWithAudit(entities);

        assertEquals(entities.size(), result.size());
        verify(employeeTransactionRepository).saveAllAndFlush(entities);
        verify(employeeTransactionAuditRepository).saveAll(List.of(auditEntity));
    }

    // --- Helper to override singleton INSTANCE (for testing only) ---
    private void setAuditMapperSingleton(EmployeeTransactionAuditMapper mapperMock) {
        try {
            var instanceField = EmployeeTransactionAuditMapper.class.getDeclaredField("INSTANCE");
            instanceField.setAccessible(true);
            instanceField.set(null, mapperMock);
        } catch (Exception e) {
            throw new RuntimeException("Failed to mock EmployeeTransactionAuditMapper.INSTANCE", e);
        }
    }
}
