public static EmployeeResponse sample() {
    EmployeeResponse response = new EmployeeResponse();

    response.setUuid("emp-1234567890");
    response.setCompanyId("comp-9876543210");
    response.setManagerId("mgr-1122334455");
    response.setDepartment("Engineering");
    response.setTerminated(false);
    response.setTwoPercentShareholderIndicator(true);
    response.setOnboarded(true);

    response.setWorkEmail("john.doe@example.com");
    response.setCurrentEmploymentStatus("full_time");

    // Custom Fields
    CustomField customField = new CustomField();
    customField.setId("cf-001");
    customField.setCompanyCustomFieldId("ccf-001");
    customField.setName("Hobby");
    customField.setType("text");
    customField.setDescription("Employee hobby");
    customField.setValue("Photography");
    customField.setSelectionOptions(Arrays.asList("Photography", "Travel", "Reading"));
    response.setCustomFields(Set.of(customField));

    // Garnishment
    Garnishment garnishment = new Garnishment();
    garnishment.setUuid("garn-123");
    garnishment.setVersion("v1");
    garnishment.setEmployeeUuid("emp-1234567890");
    garnishment.setActive(true);
    garnishment.setAmount("50.00");
    garnishment.setDescription("Student loan garnishment");
    garnishment.setCourtOrdered(true);
    response.setGarnishments(Set.of(garnishment));

    // Child Support
    ChildSupport childSupport = new ChildSupport();
    childSupport.setState("NY");
    childSupport.setPaymentPeriod("Monthly");
    childSupport.setFipsCode("36001");
    childSupport.setCaseNumber("CSN-789");
    childSupport.setOrderNumber("ORD-456");
    childSupport.setRemittanceNumber("REM-123");
    response.setChildSupports(Set.of(childSupport));

    // Termination
    Termination termination = new Termination();
    termination.setUuid("term-456");
    termination.setVersion("v2");
    termination.setEmployeeUuid("emp-1234567890");
    termination.setActive(false);
    termination.setCancelable(true);
    termination.setEffectiveDate("2025-07-01");
    termination.setRunTerminationPayrollIndicator(true);
    response.setTerminations(Set.of(termination));

    // Paid Time Off
    PaidTimeOff pto = new PaidTimeOff();
    pto.setAccrualUnit("hours");
    pto.setAccrualRate("8");
    pto.setAccrualMethod("monthly");
    pto.setAccrualPeriod("monthly");
    pto.setAccrualBalance("16");
    pto.setMaximumAccrualBalance("120");
    pto.setPaidAtTerminationIndicator(true);
    response.setEligiblePaidTimeOff(Set.of(pto));

    return response;
}
import net.jpmchase.payroll.processor.service.persistence.EmployeeTransactionPersistenceService;
import net.jpmchase.payroll.processor.repository.EmployeeTransactionRepository;
import net.jpmchase.payroll.processor.repository.EmployeeTransactionAuditRepository;
import net.jpmchase.payroll.processor.model.entity.EmployeeTransactionEntity;
import net.jpmchase.payroll.processor.model.entity.EmployeeTransactionAuditEntity;
import net.jpmchase.payroll.processor.mapper.EmployeeTransactionAuditMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.List;
import java.util.Collections;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

class EmployeeTransactionPersistenceServiceTest {

    private EmployeeTransactionRepository employeeTransactionRepository;
    private EmployeeTransactionAuditRepository employeeTransactionAuditRepository;
    private EmployeeTransactionPersistenceService persistenceService;

    @BeforeEach
    void setUp() {
        employeeTransactionRepository = mock(EmployeeTransactionRepository.class);
        employeeTransactionAuditRepository = mock(EmployeeTransactionAuditRepository.class);
        persistenceService = new EmployeeTransactionPersistenceService(employeeTransactionRepository, employeeTransactionAuditRepository);
    }

    @Test
    void testSave() {
        EmployeeTransactionEntity entity = new EmployeeTransactionEntity();
        when(employeeTransactionRepository.save(entity)).thenReturn(entity);

        EmployeeTransactionEntity result = persistenceService.save(entity);
        assertNotNull(result);
        assertEquals(entity, result);
        verify(employeeTransactionRepository).save(entity);
    }

    @Test
    void testSaveAndFlush() {
        EmployeeTransactionEntity entity = new EmployeeTransactionEntity();
        when(employeeTransactionRepository.saveAndFlush(entity)).thenReturn(entity);

        EmployeeTransactionEntity result = persistenceService.saveAndFlush(entity);
        assertNotNull(result);
        assertEquals(entity, result);
        verify(employeeTransactionRepository).saveAndFlush(entity);
    }

    @Test
    void testSaveAll() {
        List<EmployeeTransactionEntity> entities = List.of(new EmployeeTransactionEntity());
        when(employeeTransactionRepository.saveAll(entities)).thenReturn(entities);

        List<EmployeeTransactionEntity> result = persistenceService.saveALL(entities);
        assertEquals(entities.size(), result.size());
        verify(employeeTransactionRepository).saveAll(entities);
    }

    @Test
    void testSaveAllAndFlush() {
        List<EmployeeTransactionEntity> entities = List.of(new EmployeeTransactionEntity());
        when(employeeTransactionRepository.saveAllAndFlush(entities)).thenReturn(entities);

        List<EmployeeTransactionEntity> result = persistenceService.saveALLAndFlush(entities);
        assertEquals(entities.size(), result.size());
        verify(employeeTransactionRepository).saveAllAndFlush(entities);
    }

    @Test
    void testSaveAllWithAudit() {
        EmployeeTransactionEntity entity = new EmployeeTransactionEntity();
        List<EmployeeTransactionEntity> entities = List.of(entity);

        EmployeeTransactionAuditEntity auditEntity = new EmployeeTransactionAuditEntity();
        EmployeeTransactionAuditMapper mapperMock = mock(EmployeeTransactionAuditMapper.class);
        setAuditMapperSingleton(mapperMock);

        when(mapperMock.toAuditEntity(entity)).thenReturn(auditEntity);
        when(employeeTransactionRepository.saveAll(entities)).thenReturn(entities);
        when(employeeTransactionAuditRepository.saveAll(List.of(auditEntity))).thenReturn(List.of(auditEntity));

        List<EmployeeTransactionEntity> result = persistenceService.saveALLWithAudit(entities);

        assertEquals(entities.size(), result.size());
        verify(employeeTransactionRepository).saveAll(entities);
        verify(employeeTransactionAuditRepository).saveAll(List.of(auditEntity));
    }

    @Test
    void testSaveAllAndFlushWithAudit() {
        EmployeeTransactionEntity entity = new EmployeeTransactionEntity();
        List<EmployeeTransactionEntity> entities = List.of(entity);

        EmployeeTransactionAuditEntity auditEntity = new EmployeeTransactionAuditEntity();
        EmployeeTransactionAuditMapper mapperMock = mock(EmployeeTransactionAuditMapper.class);
        setAuditMapperSingleton(mapperMock);

        when(mapperMock.toAuditEntity(entity)).thenReturn(auditEntity);
        when(employeeTransactionRepository.saveAllAndFlush(entities)).thenReturn(entities);
        when(employeeTransactionAuditRepository.saveAll(List.of(auditEntity))).thenReturn(List.of(auditEntity));

        List<EmployeeTransactionEntity> result = persistenceService.saveAndFlushALLWithAudit(entities);

        assertEquals(entities.size(), result.size());
        verify(employeeTransactionRepository).saveAllAndFlush(entities);
        verify(employeeTransactionAuditRepository).saveAll(List.of(auditEntity));
    }

    // --- Helper to override singleton INSTANCE (for testing only) ---
    private void setAuditMapperSingleton(EmployeeTransactionAuditMapper mapperMock) {
        try {
            var instanceField = EmployeeTransactionAuditMapper.class.getDeclaredField("INSTANCE");
            instanceField.setAccessible(true);
            instanceField.set(null, mapperMock);
        } catch (Exception e) {
            throw new RuntimeException("Failed to mock EmployeeTransactionAuditMapper.INSTANCE", e);
        }
    }
}
import net.jpmchase.payroll.processor.model.entity.PayrollEntity;
import net.jpmchase.payroll.processor.model.entity.PayrollAuditEntity;
import net.jpmchase.payroll.processor.repository.PayrollRepository;
import net.jpmchase.payroll.processor.repository.PayrollAuditRepository;
import net.jpmchase.payroll.processor.mapper.PayrollAuditMapper;
import net.jpmchase.payroll.processor.service.persistence.PayrollPersistenceService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.List;
import java.util.Optional;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

class PayrollPersistenceServiceTest {

    private PayrollRepository payrollRepository;
    private PayrollAuditRepository payrollAuditRepository;
    private PayrollAuditMapper payrollAuditMapper;
    private PayrollPersistenceService service;

    @BeforeEach
    void setup() {
        payrollRepository = mock(PayrollRepository.class);
        payrollAuditRepository = mock(PayrollAuditRepository.class);
        payrollAuditMapper = mock(PayrollAuditMapper.class);
        service = new PayrollPersistenceService(payrollRepository, payrollAuditRepository);
    }

    @Test
    void testSave() {
        PayrollEntity entity = new PayrollEntity();
        when(payrollRepository.save(entity)).thenReturn(entity);

        PayrollEntity result = service.save(entity);
        assertNotNull(result);
        assertEquals(entity, result);
        verify(payrollRepository).save(entity);
    }

    @Test
    void testSaveAndFlush() {
        PayrollEntity entity = new PayrollEntity();
        when(payrollRepository.saveAndFlush(entity)).thenReturn(entity);

        PayrollEntity result = service.saveAndFlush(entity);
        assertNotNull(result);
        assertEquals(entity, result);
        verify(payrollRepository).saveAndFlush(entity);
    }

    @Test
    void testSaveAll() {
        List<PayrollEntity> entities = List.of(new PayrollEntity());
        when(payrollRepository.saveAll(entities)).thenReturn(entities);

        List<PayrollEntity> result = service.saveALL(entities);
        assertEquals(entities, result);
        verify(payrollRepository).saveAll(entities);
    }

    @Test
    void testSaveAllAndFlush() {
        List<PayrollEntity> entities = List.of(new PayrollEntity());
        when(payrollRepository.saveAllAndFlush(entities)).thenReturn(entities);

        List<PayrollEntity> result = service.saveALLAndFlush(entities);
        assertEquals(entities, result);
        verify(payrollRepository).saveAllAndFlush(entities);
    }

    @Test
    void testSaveWithAudit() {
        PayrollEntity entity = new PayrollEntity();
        PayrollAuditEntity auditEntity = new PayrollAuditEntity();

        // Inject mapper via reflection if using static final singleton
        setMapperInstance(auditEntity, entity);

        when(payrollAuditRepository.saveAndFlush(auditEntity)).thenReturn(auditEntity);
        when(payrollRepository.saveAndFlush(entity)).thenReturn(entity);

        PayrollEntity result = service.saveWithAudit(entity);
        assertEquals(entity, result);
    }

    @Test
    void testSaveAllWithAudit() {
        PayrollEntity entity = new PayrollEntity();
        PayrollAuditEntity auditEntity = new PayrollAuditEntity();

        List<PayrollEntity> entities = List.of(entity);
        List<PayrollAuditEntity> audits = List.of(auditEntity);

        setMapperInstance(auditEntity, entity);

        when(payrollAuditRepository.saveAll(audits)).thenReturn(audits);
        when(payrollRepository.saveAll(entities)).thenReturn(entities);

        List<PayrollEntity> result = service.saveALLWithAudit(entities);
        assertEquals(entities, result);
    }

    @Test
    void testFindBySrcPayrollId() {
        String srcId = "SRC123";
        PayrollEntity entity = new PayrollEntity();
        when(payrollRepository.findBySrcPayrollId(srcId)).thenReturn(Optional.of(entity));

        Optional<PayrollEntity> result = service.findBySrcPayrollId(srcId);
        assertTrue(result.isPresent());
        assertEquals(entity, result.get());
    }

    // === Helper method for static singleton workaround ===
    private void setMapperInstance(PayrollAuditEntity auditEntity, PayrollEntity input) {
        try {
            var mapperField = PayrollAuditMapper.class.getDeclaredField("INSTANCE");
            mapperField.setAccessible(true);
            PayrollAuditMapper mockMapper = mock(PayrollAuditMapper.class);
            when(mockMapper.toAuditEntity(input)).thenReturn(auditEntity);
            mapperField.set(null, mockMapper);
        } catch (Exception e) {
            throw new RuntimeException("Unable to mock PayrollAuditMapper.INSTANCE", e);
        }
    }
}
import net.jpmchase.payroll.processor.model.entity.PayrollTransactionEntity;
import net.jpmchase.payroll.processor.model.entity.PayrollTransactionAuditEntity;
import net.jpmchase.payroll.processor.repository.PayrollTransactionRepository;
import net.jpmchase.payroll.processor.repository.PayrollTransactionAuditRepository;
import net.jpmchase.payroll.processor.mapper.PayrollTransactionAuditEntityMapper;
import net.jpmchase.payroll.processor.service.persistence.PayrollTransactionPersistenceService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class PayrollTransactionPersistenceServiceTest {

    private PayrollTransactionRepository payrollTransactionRepository;
    private PayrollTransactionAuditRepository payrollTransactionAuditRepository;
    private PayrollTransactionPersistenceService service;

    @BeforeEach
    void setUp() {
        payrollTransactionRepository = mock(PayrollTransactionRepository.class);
        payrollTransactionAuditRepository = mock(PayrollTransactionAuditRepository.class);
        service = new PayrollTransactionPersistenceService(payrollTransactionRepository, payrollTransactionAuditRepository);
    }

    @Test
    void testSave() {
        PayrollTransactionEntity entity = new PayrollTransactionEntity();
        when(payrollTransactionRepository.save(entity)).thenReturn(entity);

        PayrollTransactionEntity result = service.save(entity);
        assertNotNull(result);
        assertEquals(entity, result);
        verify(payrollTransactionRepository).save(entity);
    }

    @Test
    void testSaveAndFlush() {
        PayrollTransactionEntity entity = new PayrollTransactionEntity();
        when(payrollTransactionRepository.saveAndFlush(entity)).thenReturn(entity);

        PayrollTransactionEntity result = service.saveAndFlush(entity);
        assertNotNull(result);
        assertEquals(entity, result);
        verify(payrollTransactionRepository).saveAndFlush(entity);
    }

    @Test
    void testSaveAll() {
        List<PayrollTransactionEntity> list = List.of(new PayrollTransactionEntity());
        when(payrollTransactionRepository.saveAll(list)).thenReturn(list);

        List<PayrollTransactionEntity> result = service.saveALL(list);
        assertEquals(list, result);
        verify(payrollTransactionRepository).saveAll(list);
    }

    @Test
    void testSaveAllAndFlush() {
        List<PayrollTransactionEntity> list = List.of(new PayrollTransactionEntity());
        when(payrollTransactionRepository.saveAllAndFlush(list)).thenReturn(list);

        List<PayrollTransactionEntity> result = service.saveALLAndFlush(list);
        assertEquals(list, result);
        verify(payrollTransactionRepository).saveAllAndFlush(list);
    }

    @Test
    void testSaveAllWithAudit() {
        PayrollTransactionEntity entity = new PayrollTransactionEntity();
        PayrollTransactionAuditEntity auditEntity = new PayrollTransactionAuditEntity();
        List<PayrollTransactionEntity> entities = List.of(entity);
        List<PayrollTransactionAuditEntity> audits = List.of(auditEntity);

        mockAuditMapperStatic(entity, auditEntity);

        when(payrollTransactionRepository.saveAll(entities)).thenReturn(entities);
        when(payrollTransactionAuditRepository.saveAll(audits)).thenReturn(audits);

        List<PayrollTransactionEntity> result = service.saveAllWithAudit(entities);

        assertEquals(entities, result);
        verify(payrollTransactionAuditRepository).saveAll(audits);
        verify(payrollTransactionRepository).saveAll(entities);
    }

    @Test
    void testSaveAllAndFlushWithAudit() {
        PayrollTransactionEntity entity = new PayrollTransactionEntity();
        PayrollTransactionAuditEntity auditEntity = new PayrollTransactionAuditEntity();
        List<PayrollTransactionEntity> entities = List.of(entity);
        List<PayrollTransactionAuditEntity> audits = List.of(auditEntity);

        mockAuditMapperStatic(entity, auditEntity);

        when(payrollTransactionRepository.saveAllAndFlush(entities)).thenReturn(entities);
        when(payrollTransactionAuditRepository.saveAll(audits)).thenReturn(audits);

        List<PayrollTransactionEntity> result = service.saveAndFlushAllWithAudit(entities);

        assertEquals(entities, result);
        verify(payrollTransactionAuditRepository).saveAll(audits);
        verify(payrollTransactionRepository).saveAllAndFlush(entities);
    }

    // === Helper to override static singleton INSTANCE of mapper ===
    private void mockAuditMapperStatic(PayrollTransactionEntity entity, PayrollTransactionAuditEntity audit) {
        try {
            var field = PayrollTransactionAuditEntityMapper.class.getDeclaredField("INSTANCE");
            field.setAccessible(true);
            PayrollTransactionAuditEntityMapper mockMapper = mock(PayrollTransactionAuditEntityMapper.class);
            when(mockMapper.toAuditEntity(entity)).thenReturn(audit);
            field.set(null, mockMapper);
        } catch (Exception e) {
            throw new RuntimeException("Failed to inject mock into PayrollTransactionAuditEntityMapper.INSTANCE", e);
        }
    }
}