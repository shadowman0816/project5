package net.jpmchase.payroll.processor.steps.payee;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.jpmchase.payroll.processor.enums.PayeeType;
import net.jpmchase.payroll.processor.exception.BusinessException;
import net.jpmchase.payroll.processor.model.Event;
import net.jpmchase.payroll.processor.model.MessageBody;
import net.jpmchase.payroll.processor.model.WorkflowContext;
import net.jpmchase.payroll.processor.step.Step;
import org.slf4j.MDC;
import org.springframework.stereotype.Component;

import java.util.Optional;
import java.util.UUID;

import static net.jpmchase.payroll.processor.constants.ContextKeys.*;
import static net.jpmchase.payroll.processor.enums.ErrorCode.MISSING_REQUIRED_ID;

@Slf4j
@Component("ReadIncomingContractorBankAccountEvent")
@RequiredArgsConstructor
public class ReadContractorBankAccountEventStep implements Step {

    @Override
    public void execute(WorkflowContext context) {
        Event event = context.get(EVENT, Event.class);

        String messageId = Optional.of(event)
                .map(Event::getMessageId)
                .orElseThrow(() -> new BusinessException(MISSING_REQUIRED_ID.formatMessage("Message Id"), MISSING_REQUIRED_ID));

        String employeeId = Optional.of(event)
                .map(Event::getMessageBody)
                .map(MessageBody::getReferences)
                .map(map -> map.get("employee_uuid"))
                .map(UUID::toString)
                .orElseThrow(() -> new BusinessException(MISSING_REQUIRED_ID.formatMessage("Employee Id"), MISSING_REQUIRED_ID));

        String companyId = Optional.of(event)
                .map(Event::getMessageBody)
                .map(MessageBody::getReferences)
                .map(map -> map.get("company_uuid"))
                .map(UUID::toString)
                .orElseThrow(() -> new BusinessException(MISSING_REQUIRED_ID.formatMessage("Company Id"), MISSING_REQUIRED_ID));

        String bankAccountUUID = Optional.of(event)
                .map(Event::getMessageBody)
                .map(MessageBody::getEntityUUID)
                .map(UUID::toString)
                .orElseThrow(() -> new BusinessException(MISSING_REQUIRED_ID.formatMessage("Bank Account Id"), MISSING_REQUIRED_ID));

        // Put values into context
        context.put(MESSAGE_ID, messageId);
        context.put(SRC_PAYEE_ID, employeeId);
        context.put(COMPANY_UUID, companyId);
        context.put(BANK_ACCOUNT_UUID, bankAccountUUID);
        context.put(PAYEE_TYPE, PayeeType.INDIVIDUAL_CONTRACTOR.name());

        // Set MDC for traceability across all downstream logs
        MDC.put("eventId", event.getMessageBody().getEventId());
        MDC.put("messageId", messageId);
        MDC.put("stepName", "ReadIncomingContractorBankAccountEvent");

        log.info("[STEP] Initialized context for contractor bank account event: eventId={}, messageId={}, employeeId={}, companyId={}, bankAccountUUID={}",
                event.getMessageBody().getEventId(), messageId, employeeId, companyId, bankAccountUUID);
    }
}