package net.jpmchase.payroll.processor.steps.payee;

import net.jpmchase.payroll.processor.entity.*;
import net.jpmchase.payroll.processor.enums.PayrollStatus;
import net.jpmchase.payroll.processor.model.WorkflowContext;
import net.jpmchase.payroll.processor.repository.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import static net.jpmchase.payroll.processor.constants.ContextKeys.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class PayrollInProgressForContractorDeterminationStepTest {

    @InjectMocks
    private PayrollInProgressForContractorDeterminationStep step;

    @Mock private ContractorPaymentGroupRepository contractorPaymentGroupRepository;
    @Mock private ContractorPaymentRepository contractorPaymentRepository;
    @Mock private PayeeRepository payeeRepository;

    @Captor private ArgumentCaptor<Boolean> payrollFlagCaptor;

    private final String payeeId = "payee123";
    private final UUID pyrlEnrlId = UUID.randomUUID();
    private final String groupId = "grp-456";
    private final String eventId = "event-xyz";
    private final String messageId = "msg-abc";

    private WorkflowContext context;

    @BeforeEach
    void setup() {
        MockitoAnnotations.openMocks(this);
        step = new PayrollInProgressForContractorDeterminationStep(contractorPaymentGroupRepository, payeeRepository, contractorPaymentRepository);
        context = new WorkflowContext();
        context.put(SRC_PAYEE_ID, payeeId);
        context.put(EVENT_ID, eventId);
        context.put(MESSAGE_ID, messageId);
    }

    @Test
    void test_payeeNotFound_setsInProgressFalse() {
        when(payeeRepository.findById(payeeId)).thenReturn(Optional.empty());

        step.execute(context);

        assertFalse(context.get(PAYROLL_IN_PROGRESS, Boolean.class));
        verify(contractorPaymentGroupRepository, never()).findByEnrollmentIdAndCPStatusCode(any(), any());
    }

    @Test
    void test_nullPayrollEnrollment_setsInProgressFalse() {
        PayeeEntity payee = new PayeeEntity();
        payee.setPayeeId(payeeId);
        payee.setPyrlEnrlId(null);

        when(payeeRepository.findById(payeeId)).thenReturn(Optional.of(payee));

        step.execute(context);

        assertFalse(context.get(PAYROLL_IN_PROGRESS, Boolean.class));
        verify(contractorPaymentGroupRepository, never()).findByEnrollmentIdAndCPStatusCode(any(), any());
    }

    @Test
    void test_noPaymentGroups_setsInProgressFalse() {
        PayeeEntity payee = new PayeeEntity();
        payee.setPayeeId(payeeId);
        payee.setPyrlEnrlId(pyrlEnrlId);

        when(payeeRepository.findById(payeeId)).thenReturn(Optional.of(payee));
        when(contractorPaymentGroupRepository.findByEnrollmentIdAndCPStatusCode(eq(pyrlEnrlId), anyList()))
                .thenReturn(List.of());

        step.execute(context);

        assertFalse(context.get(PAYROLL_IN_PROGRESS, Boolean.class));
        verify(contractorPaymentRepository, never()).findBySrcCntrPymtGrpId(any());
    }

    @Test
    void test_noPaymentsInGroup_setsInProgressFalse() {
        PayeeEntity payee = new PayeeEntity();
        payee.setPayeeId(payeeId);
        payee.setPyrlEnrlId(pyrlEnrlId);

        ContractorPaymentGroupEntity group = new ContractorPaymentGroupEntity();
        group.setId(new ContractorPaymentGroupEntityId());
        group.getId().setSrcCntrPymtGpId(groupId);

        when(payeeRepository.findById(payeeId)).thenReturn(Optional.of(payee));
        when(contractorPaymentGroupRepository.findByEnrollmentIdAndCPStatusCode(eq(pyrlEnrlId), anyList()))
                .thenReturn(List.of(group));
        when(contractorPaymentRepository.findBySrcCntrPymtGpId(groupId)).thenReturn(List.of());

        step.execute(context);

        assertFalse(context.get(PAYROLL_IN_PROGRESS, Boolean.class));
    }

    @Test
    void test_payeeMatchInPayments_setsInProgressTrue() {
        PayeeEntity payee = new PayeeEntity();
        payee.setPayeeId(payeeId);
        payee.setPyrlEnrlId(pyrlEnrlId);

        ContractorPaymentGroupEntity group = new ContractorPaymentGroupEntity();
        group.setId(new ContractorPaymentGroupEntityId());
        group.getId().setSrcCntrPymtGpId(groupId);

        ContractorPaymentEntity payment = new ContractorPaymentEntity();
        payment.setPayeeId(payeeId);

        when(payeeRepository.findById(payeeId)).thenReturn(Optional.of(payee));
        when(contractorPaymentGroupRepository.findByEnrollmentIdAndCPStatusCode(eq(pyrlEnrlId), anyList()))
                .thenReturn(List.of(group));
        when(contractorPaymentRepository.findBySrcCntrPymtGpId(groupId)).thenReturn(List.of(payment));

        step.execute(context);

        assertTrue(context.get(PAYROLL_IN_PROGRESS, Boolean.class));
    }

    @Test
    void test_multipleGroups_withOneMatch_setsInProgressTrue() {
        PayeeEntity payee = new PayeeEntity();
        payee.setPayeeId(payeeId);
        payee.setPyrlEnrlId(pyrlEnrlId);

        ContractorPaymentGroupEntity group1 = new ContractorPaymentGroupEntity();
        group1.setId(new ContractorPaymentGroupEntityId());
        group1.getId().setSrcCntrPymtGpId("group1");

        ContractorPaymentGroupEntity group2 = new ContractorPaymentGroupEntity();
        group2.setId(new ContractorPaymentGroupEntityId());
        group2.getId().setSrcCntrPymtGpId("group2");

        ContractorPaymentEntity nonMatch = new ContractorPaymentEntity();
        nonMatch.setPayeeId("someone_else");

        ContractorPaymentEntity match = new ContractorPaymentEntity();
        match.setPayeeId(payeeId);

        when(payeeRepository.findById(payeeId)).thenReturn(Optional.of(payee));
        when(contractorPaymentGroupRepository.findByEnrollmentIdAndCPStatusCode(eq(pyrlEnrlId), anyList()))
                .thenReturn(List.of(group1, group2));
        when(contractorPaymentRepository.findBySrcCntrPymtGpId("group1")).thenReturn(List.of(nonMatch));
        when(contractorPaymentRepository.findBySrcCntrPymtGpId("group2")).thenReturn(List.of(match));

        step.execute(context);

        assertTrue(context.get(PAYROLL_IN_PROGRESS, Boolean.class));
    }
}