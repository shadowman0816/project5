package net.jpmchase.payroll.processor.steps.payee;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.jpmchase.payroll.processor.constants.ContextKeys;
import net.jpmchase.payroll.processor.entity.ContractorPaymentEntity;
import net.jpmchase.payroll.processor.entity.ContractorPaymentGroupEntity;
import net.jpmchase.payroll.processor.entity.PayeeEntity;
import net.jpmchase.payroll.processor.enums.PayrollStatus;
import net.jpmchase.payroll.processor.model.WorkflowContext;
import net.jpmchase.payroll.processor.repository.ContractorPaymentGroupRepository;
import net.jpmchase.payroll.processor.repository.ContractorPaymentRepository;
import net.jpmchase.payroll.processor.repository.PayeeAccountRepository;
import net.jpmchase.payroll.processor.repository.PayeeRepository;
import net.jpmchase.payroll.processor.step.Step;
import org.slf4j.MDC;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicBoolean;

import static net.jpmchase.payroll.processor.constants.ContextKeys.*;

@Slf4j
@Component("DeterminePayrollInProgressForAContractor")
@RequiredArgsConstructor
public class PayrollInProgressForContractorDeterminationStep implements Step {

    private final ContractorPaymentGroupRepository contractorPaymentGroupRepository;
    private final ContractorPaymentRepository contractorPaymentRepository;
    private final PayeeRepository payeeRepository;

    @Override
    public void execute(WorkflowContext context) {
        String payeeId = context.get(SRC_PAYEE_ID, String.class);
        String eventId = context.get(EVENT_ID, String.class);
        String messageId = context.get(MESSAGE_ID, String.class);
        String stepName = "DeterminePayrollInProgressForAContractor";

        MDC.put("eventId", eventId);
        MDC.put("messageId", messageId);
        MDC.put("stepName", stepName);

        log.info("[STEP] Checking if payroll is in progress for contractor payeeId={}", payeeId);

        Optional<PayeeEntity> payeeOpt = validateAndLoadPayee(payeeId);
        if (payeeOpt.isEmpty()) {
            setPayrollInProgressToContext(context, false);
            return;
        }

        PayeeEntity payee = payeeOpt.get();
        UUID pyrlEnrlId = payee.getPyrlEnrlId();
        if (pyrlEnrlId == null) {
            log.info("[STEP] No payroll enrollment ID found for payeeId={}. Skipping.", payeeId);
            setPayrollInProgressToContext(context, false);
            return;
        }

        AtomicBoolean inProgress = new AtomicBoolean(false);
        List<String> excludedStatusCodes = List.of(
                PayrollStatus.CANCELLED.getCode(),
                PayrollStatus.REJECTED.getCode(),
                PayrollStatus.PROCESSED.getCode()
        );

        List<ContractorPaymentGroupEntity> groupList =
                contractorPaymentGroupRepository.findByEnrollmentIdAndCPStatusCode(pyrlEnrlId, excludedStatusCodes);

        for (ContractorPaymentGroupEntity group : groupList) {
            boolean found = checkPayrollInProgressForPayee(payeeId, group);
            if (found) {
                inProgress.set(true);
                break;
            }
        }

        setPayrollInProgressToContext(context, inProgress.get());
        if (inProgress.get()) {
            log.info("[STEP] Payroll is currently in progress for payeeId={}. Aborting downstream steps.", payeeId);
        } else {
            log.info("[STEP] No active payroll found for payeeId={}. Continuing processing.", payeeId);
        }
    }

    private Optional<PayeeEntity> validateAndLoadPayee(String payeeId) {
        Optional<PayeeEntity> payeeOpt = payeeRepository.findById(payeeId);
        if (payeeOpt.isEmpty()) {
            log.info("[STEP] No PayeeEntity found for payeeId={}. Treating as valid and skipping.", payeeId);
        }
        return payeeOpt;
    }

    private boolean checkPayrollInProgressForPayee(String payeeId, ContractorPaymentGroupEntity groupEntity) {
        String groupId = groupEntity.getId().getSrcCntrPymtGpId();
        List<ContractorPaymentEntity> payments = contractorPaymentRepository.findBySrcCntrPymtGpId(groupId);

        if (payments == null || payments.isEmpty()) {
            log.info("[STEP] No contractor payments found under groupId={} for payeeId={}.", groupId, payeeId);
            return false;
        }

        for (ContractorPaymentEntity payment : payments) {
            if (payeeId.equals(payment.getPayeeId())) {
                log.info("[STEP] Payroll match found in groupId={} for payeeId={}.", groupId, payeeId);
                return true;
            }
        }

        return false;
    }

    private void setPayrollInProgressToContext(WorkflowContext context, boolean value) {
        context.put(ContextKeys.PAYROLL_IN_PROGRESS, value);
    }
}