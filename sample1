package net.jpmchase.payroll.processor.steps.payee;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.jpmchase.payroll.processor.constants.ContextKeys;
import net.jpmchase.payroll.processor.entity.*;
import net.jpmchase.payroll.processor.enums.PayrollStatus;
import net.jpmchase.payroll.processor.model.WorkflowContext;
import net.jpmchase.payroll.processor.repository.*;
import net.jpmchase.payroll.processor.step.Step;
import org.slf4j.MDC;
import org.springframework.stereotype.Component;

import java.util.*;
import java.util.concurrent.atomic.AtomicBoolean;

import static net.jpmchase.payroll.processor.constants.ContextKeys.*;

@Slf4j
@Component("DeterminePayrollInProgressForAnEmployee")
@RequiredArgsConstructor
public class PayrollInProgressForEmployeeDeterminationStep implements Step {

    private final PayrollRepository payrollRepository;
    private final PayrollTransactionRepository payrollTxnRepository;
    private final PayeeRepository payeeRepository;
    private final PayeeAccountRepository payeeAcctRepository;
    private final EmployeeTransactionRepository payeeTxnRepository;

    @Override
    public void execute(WorkflowContext context) {
        String payeeId = context.get(SRC_PAYEE_ID, String.class);
        String eventId = context.get(EVENT_ID, String.class);
        String messageId = context.get(MESSAGE_ID, String.class);
        String stepName = "DeterminePayrollInProgressForAnEmployee";

        MDC.put("eventId", eventId);
        MDC.put("messageId", messageId);
        MDC.put("stepName", stepName);

        log.info("[STEP] Starting payroll in-progress check for employee payeeId={}", payeeId);

        setPayrollInProgressToContext(context, false); // Default to false

        Optional<PayeeEntity> payeeOpt = payeeRepository.findById(payeeId);
        if (payeeOpt.isEmpty()) {
            log.info("[STEP] No PayeeEntity found for payeeId={}. Treating as valid and skipping.", payeeId);
            return;
        }

        PayeeEntity payee = payeeOpt.get();
        UUID pyrlEnrlId = payee.getPyrlEnrlId();
        if (pyrlEnrlId == null) {
            log.info("[STEP] No payroll enrollment ID found for payeeId={}. Skipping.", payeeId);
            return;
        }

        List<String> excludedStatusCodes = List.of(
                PayrollStatus.CANCELLED.getCode(),
                PayrollStatus.REJECTED.getCode(),
                PayrollStatus.PROCESSED.getCode()
        );

        AtomicBoolean inProgress = new AtomicBoolean(false);

        payrollRepository.findByEnrollmentIdAndPayrollStatusCode(pyrlEnrlId, excludedStatusCodes)
                .ifPresent(payrollList -> {
                    for (PayrollEntity payroll : payrollList) {
                        if (checkPayrollInProgressForPayee(payeeId, payroll)) {
                            inProgress.set(true);
                            break;
                        }
                    }
                });

        setPayrollInProgressToContext(context, inProgress.get());
        if (inProgress.get()) {
            log.info("[STEP] Payroll is in progress for payeeId={}. Aborting downstream steps.", payeeId);
        } else {
            log.info("[STEP] No active payroll in progress for payeeId={}. Continuing.", payeeId);
        }
    }

    private boolean checkPayrollInProgressForPayee(String payeeId, PayrollEntity payroll) {
        String srcPyrlId = payroll.getId().getSrcPyrlId();

        Optional<List<PayrollTransactionEntity>> payrollTxnList = payrollTxnRepository.findBySourcePayrollId(srcPyrlId);
        if (payrollTxnList.isEmpty() || payrollTxnList.get().isEmpty()) {
            log.info("[STEP] No PayrollTxn found for payeeId={}. Skipping.", payeeId);
            return false;
        }

        Optional<List<PayeeAccountEntity>> payeeAcctOptList = payeeAcctRepository.findBySourcePayeeId(payeeId);
        if (payeeAcctOptList.isEmpty() || payeeAcctOptList.get().isEmpty()) {
            log.info("[STEP] No PayeeAccount found for payeeId={}. Skipping.", payeeId);
            return false;
        }

        for (PayeeAccountEntity acct : payeeAcctOptList.get()) {
            String payeeAcctId = acct.getPyrPayeeAcctId();

            for (PayrollTransactionEntity txn : payrollTxnList.get()) {
                String pyrlTxnId = txn.getId().getPyrlTxnId();

                Optional<List<EmployeeTransactionEntity>> payeeTxnOpt =
                        payeeTxnRepository.findByPayrollPayeeTxn(payeeAcctId, pyrlTxnId);

                if (payeeTxnOpt.isPresent() && !payeeTxnOpt.get().isEmpty()) {
                    log.info("[STEP] Matching payroll found: payeeId={}, payeeAcctId={}, payrollTxnId={}", payeeId, payeeAcctId, pyrlTxnId);
                    return true;
                }
            }
        }

        return false;
    }

    private void setPayrollInProgressToContext(final WorkflowContext context, final boolean value) {
        context.put(PAYROLL_IN_PROGRESS, value);
    }
}